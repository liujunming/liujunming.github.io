<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L</title>
  
  <subtitle>make it simple, make it happen.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujunming.github.io/"/>
  <updated>2020-12-28T15:39:04.592Z</updated>
  <id>http://liujunming.github.io/</id>
  
  <author>
    <name>liujunming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deep into CR0/CR4 in VMX operation</title>
    <link href="http://liujunming.github.io/2020/12/26/Deep-into-CR0-CR4-in-VMX-operation/"/>
    <id>http://liujunming.github.io/2020/12/26/Deep-into-CR0-CR4-in-VMX-operation/</id>
    <published>2020-12-26T05:12:10.000Z</published>
    <updated>2020-12-28T15:39:04.592Z</updated>
    
    <content type="html"><![CDATA[<p>In VMX operation, the value of guest CR0/CR4 need to consider the following cases:</p><ol><li>processors may fix certain bits in CR0 and CR4 to specific values and not support other values. </li><li>Guest/Host Masks and Read Shadows for CR0 and CR4</li></ol><a id="more"></a><h3 id="1-Background"><a href="#1-Background" class="headerlink" title="1. Background"></a>1. Background</h3><p>For the first case, you can refer to intel SDM Vol. 3D A.7(<strong>VMX-FIXED BITS IN CR0</strong>) and A.8(<strong>VMX-FIXED BITS IN CR4</strong>).</p><p>We’ll deep into the second case.</p><p><img src="/images/2020/12/3.PNG" alt></p><p>From the description, please try to answer this question: Why needs the <strong>guest/host masks</strong>  and <strong>read shadow</strong>?</p><p>Let’s consider this example:</p><p><img src="/images/2020/12/4.PNG" alt></p><p>From SDM description, CR4.VMXE must be 1 in VMX operation. Without <strong>guest/host masks</strong> and <strong>read shadow</strong>, if guest is a normal operating system, not a VMM, when guest want to get CR4.VMXE, it would be 1. That’s the wrong value for guest. But we still need to ensure physical CR4.VMXE is1 in non-root mode!</p><p>How can we satisfy all the above requirements?</p><p><strong>guest/host masks</strong> and <strong>read shadow</strong> help us solve the issue.</p><ol><li><p>set VMCS Guest CR4(00006804H ) field VMXE bit to be 1, to ensure physical CR4.VMXE  is 1 in non-root mode;</p></li><li><p>set CR4 guest/host masks(00006002H ) field VMXE bit to be 1, means VMXE bit is owned by host;</p></li><li>set CR4 read shadow(00006006H ) field VMXE bit to be 0.</li></ol><p>When guest reads CR4.VMXE, hardware will return value for this bit from the corresponding read shadow(the value is 0 here). While physical CR4.VMXE  still is 1 in non-root mode.</p><h3 id="2-Example"><a href="#2-Example" class="headerlink" title="2. Example"></a>2. Example</h3><p>Let’s take <a href="https://github.com/projectacrn/acrn-hypervisor/blob/acrn-2020w51.5-180000p/hypervisor/arch/x86/guest/virtual_cr.c" target="_blank" rel="noopener">ACRN virtual_cr.c</a> as an example.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Physical CR4 bits in VMX operation may be either flexible or fixed.</span></span><br><span class="line"><span class="comment"> * Guest CR4 bits may be operatable or reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * All the guest reserved bits should be TRAPed and EMULATed by HV</span></span><br><span class="line"><span class="comment"> * (inject #GP).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For guest operatable bits, it may be:</span></span><br><span class="line"><span class="comment"> * CR4_PASSTHRU_BITS:</span></span><br><span class="line"><span class="comment"> *Bits that may be passed through to guest. The actual passthru bits</span></span><br><span class="line"><span class="comment"> *should be masked by flexible bits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CR4_TRAP_AND_PASSTHRU_BITS:</span></span><br><span class="line"><span class="comment"> *The bits are trapped by HV and HV emulation will eventually write</span></span><br><span class="line"><span class="comment"> *the guest value to physical CR4 (GUEST_CR4) too. The actual bits</span></span><br><span class="line"><span class="comment"> *should be masked by flexible bits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CR4_TRAP_AND_EMULATE_BITS:</span></span><br><span class="line"><span class="comment"> *The bits are trapped by HV and emulated, but HV updates vCR4 only</span></span><br><span class="line"><span class="comment"> *(no update to physical CR4), i.e. pure software emulation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CR4_EMULATED_RESERVE_BITS:</span></span><br><span class="line"><span class="comment"> *The bits are trapped, but are emulated by injecting a #GP.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Above bits should not overlap.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CR0_TRAP_AND_PASSTHRU_BITS(CR0_PE | CR0_PG | CR0_WP)</span></span><br></pre></td></tr></table></figure><p>CR0_PG is trapped by HV and HV emulation will eventually write the guest value to physical CR0 (GUEST_CR0) too. Can we pass through CR0_PG to guest? The answer is no!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((cr0_changed_bits &amp; CR0_PG) != <span class="number">0U</span>L) &#123;</span><br><span class="line"><span class="comment">/* PG bit changes */</span></span><br><span class="line"><span class="keyword">if</span> ((effective_cr0 &amp; CR0_PG) != <span class="number">0U</span>L) &#123;</span><br><span class="line"><span class="comment">/* Enable paging */</span></span><br><span class="line"><span class="keyword">if</span> ((vcpu_get_efer(vcpu) &amp; MSR_IA32_EFER_LME_BIT) != <span class="number">0U</span>L) &#123;</span><br><span class="line"><span class="comment">/* Enable long mode */</span></span><br><span class="line">pr_dbg(<span class="string">"VMM: Enable long mode"</span>);</span><br><span class="line">entry_ctrls = exec_vmread32(VMX_ENTRY_CONTROLS);</span><br><span class="line">entry_ctrls |= VMX_ENTRY_CTLS_IA32E_MODE;</span><br><span class="line">exec_vmwrite32(VMX_ENTRY_CONTROLS, entry_ctrls);</span><br><span class="line"></span><br><span class="line">vcpu_set_efer(vcpu, vcpu_get_efer(vcpu) | MSR_IA32_EFER_LMA_BIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s the reason why we set the<code>VMX_ENTRY_CTLS_IA32E_MODE</code> and <code>MSR_IA32_EFER_LMA_BIT</code>.</p><p><img src="/images/2020/12/5.PNG" alt></p><p>If pass through CR0_PG to guest, while guest runs in non-root mode, there’s no way to update<code>VMX_ENTRY_CONTROLS</code> field. So we should trap CR0_PG, and update<code>VMX_ENTRY_CONTROLS</code> field in root mode.</p><h3 id="3-Conclusion"><a href="#3-Conclusion" class="headerlink" title="3. Conclusion"></a>3. Conclusion</h3><p>Because the clear and set of CR0_PG bit has <strong>side effects</strong>, so need to trap CR0_PG bit.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In VMX operation, the value of guest CR0/CR4 need to consider the following cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;processors may fix certain bits in CR0 and CR4 to specific values and not support other values. &lt;/li&gt;
&lt;li&gt;Guest/Host Masks and Read Shadows for CR0 and CR4&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="VT-x" scheme="http://liujunming.github.io/categories/VT-x/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VT-x" scheme="http://liujunming.github.io/tags/VT-x/"/>
    
  </entry>
  
  <entry>
    <title>VT-x:Relative Priority of Faults and VM Exits</title>
    <link href="http://liujunming.github.io/2020/12/01/VT-x-Relative-Priority-of-Faults-and-VM-Exits/"/>
    <id>http://liujunming.github.io/2020/12/01/VT-x-Relative-Priority-of-Faults-and-VM-Exits/</id>
    <published>2020-12-01T08:55:04.000Z</published>
    <updated>2020-12-01T14:36:04.198Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录SDM中<code>Relative Priority of Faults and VM Exits</code>一节的相关笔记。<a id="more"></a><br>The following principles describe the ordering between existing faults and VM exits:</p><ul><li>Certain exceptions have priority over VM exits. These include <strong>invalid-opcode exceptions (#UD)</strong>, <strong>faults based on privilege level</strong>, and general-protection exceptions that are based on checking I/O permission bits in the taskstate segment (TSS). For example, execution of RDMSR with CPL = 3 generates a general-protection exception and not a VM exit.</li></ul><p>以<code>XSETBV</code>instruction为例：<br><img src="/images/2020/12/2.PNG" alt></p><p>In non-root mode，if the current privileage level is not 0, VM exit won’t happen. Because <strong>faults based on privilege level</strong> has priority over VM exits.</p><p>In non-root mode，if CR4.OSXSAVE[bit 18] = 0, VM exit won’t happen. Because <strong>invalid-opcode exceptions(#UD)</strong> has priority over VM exits.</p><p>详细内容可参考patch：<a href="https://github.com/projectacrn/acrn-hypervisor/commit/56eb859ea4e3af1edbd15b80276e9f2404a43e2b" target="_blank" rel="noopener">hv: vmexit: refine xsetbv_vmexit_handler API</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录SDM中&lt;code&gt;Relative Priority of Faults and VM Exits&lt;/code&gt;一节的相关笔记。
    
    </summary>
    
      <category term="VT-x" scheme="http://liujunming.github.io/categories/VT-x/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VT-x" scheme="http://liujunming.github.io/tags/VT-x/"/>
    
  </entry>
  
  <entry>
    <title>VT-x:Information for VM Exits During Event Delivery</title>
    <link href="http://liujunming.github.io/2020/12/01/VT-x-Information-for-VM-Exits-During-Event-Delivery/"/>
    <id>http://liujunming.github.io/2020/12/01/VT-x-Information-for-VM-Exits-During-Event-Delivery/</id>
    <published>2020-12-01T05:11:55.000Z</published>
    <updated>2020-12-01T14:37:10.379Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录SDM中<code>Information for VM Exits During Event Delivery</code>一节的相关笔记。<a id="more"></a></p><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p><code>Information for VM Exits That Occur During Event Delivery</code> defined fields containing information for VM exits that occur while delivering an event through the IDT and as a result of any of the following cases:</p><ul><li>A fault occurs during event delivery and causes a VM exit (because the bit associated with the fault is set to 1 in the exception bitmap).</li><li>A task switch is invoked through a task gate in the IDT. The VM exit occurs due to the task switch only after the initial checks of the task switch pass.</li><li>Event delivery causes an APIC-access VM exit.</li><li>An EPT violation, EPT misconfiguration, page-modification log-full event, or SPP-related event that occurs during event delivery.</li></ul><p>ACRN中的<a href="https://github.com/projectacrn/acrn-hypervisor/blob/v2.2/hypervisor/arch/x86/guest/vmexit.c#L183" target="_blank" rel="noopener">实现</a>如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vcpu-&gt;arch.idt_vectoring_info = exec_vmread32(VMX_IDT_VEC_INFO_FIELD);</span><br><span class="line"><span class="keyword">if</span> ((vcpu-&gt;arch.idt_vectoring_info &amp; VMX_INT_INFO_VALID) != <span class="number">0U</span>) &#123;</span><br><span class="line"><span class="keyword">uint32_t</span> vector_info = vcpu-&gt;arch.idt_vectoring_info;</span><br><span class="line"><span class="keyword">uint32_t</span> <span class="built_in">vector</span> = vector_info &amp; <span class="number">0xff</span>U;</span><br><span class="line"><span class="keyword">uint32_t</span> type = (vector_info &amp; VMX_INT_TYPE_MASK) &gt;&gt; <span class="number">8U</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> err_code = <span class="number">0U</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == VMX_INT_TYPE_HW_EXP) &#123;</span><br><span class="line"><span class="keyword">if</span> ((vector_info &amp; VMX_INT_INFO_ERR_CODE_VALID) != <span class="number">0U</span>) &#123;</span><br><span class="line">err_code = exec_vmread32(VMX_IDT_VEC_ERROR_CODE);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">void</span>)vcpu_queue_exception(vcpu, <span class="built_in">vector</span>, err_code);</span><br><span class="line">vcpu-&gt;arch.idt_vectoring_info = <span class="number">0U</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == VMX_INT_TYPE_NMI) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_notification_nmi(vcpu-&gt;vm)) &#123;</span><br><span class="line">pr_dbg(<span class="string">"This NMI is used as notification signal. So ignore it."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">vcpu_make_request(vcpu, ACRN_REQUEST_NMI);</span><br><span class="line">vcpu-&gt;arch.idt_vectoring_info = <span class="number">0U</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* No action on EXT_INT or SW exception. */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>hardware exception的定义:<br><img src="/images/2020/12/1.PNG" alt></p><h3 id="2-测试用例"><a href="#2-测试用例" class="headerlink" title="2. 测试用例"></a>2. 测试用例</h3><p>对于<code>A fault occurs during event delivery and causes a VM exit</code> case，可以利用如下测试用例复现：</p><ol><li>设置guest IDT中Divide Error vector项的present位为0(to trigger NP fault)；</li><li>设置VMCS  exception bitmap field中的NP fault位为1(to trigger VM exit)；</li><li>guest执行divide 0指令。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录SDM中&lt;code&gt;Information for VM Exits During Event Delivery&lt;/code&gt;一节的相关笔记。
    
    </summary>
    
      <category term="VT-x" scheme="http://liujunming.github.io/categories/VT-x/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VT-x" scheme="http://liujunming.github.io/tags/VT-x/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to SR-IOV</title>
    <link href="http://liujunming.github.io/2020/10/24/Introduction-to-SR-IOV/"/>
    <id>http://liujunming.github.io/2020/10/24/Introduction-to-SR-IOV/</id>
    <published>2020-10-24T01:37:02.000Z</published>
    <updated>2020-10-25T08:45:21.038Z</updated>
    
    <content type="html"><![CDATA[<p>本文只介绍SR-IOV的基本内容，并不能cover SR-IOV的全部知识点。<a id="more"></a></p><h3 id="1-prerequisites"><a href="#1-prerequisites" class="headerlink" title="1. prerequisites"></a>1. prerequisites</h3><ol><li>需要理解VT-d的DMA remapping,interrupt remapping ,posted interrupt<ul><li><a href="/2020/10/10/VT-d-Interrupt-Remapping/">VT-d Interrupt Remapping</a></li><li><a href="/2020/10/11/VT-d-Posted-Interrupt/">VT-d Posted Interrupt</a></li></ul></li><li>需要理解PCI&amp;PCIe的config space，MSI与MSI-X.<ul><li><a href="https://tcbbd.moe/ref-and-spec/pci/" target="_blank" rel="noopener">PCI Local Bus (i.e. Conventional PCI)</a></li></ul></li><li>需要理解ATS,ACS,ARI<ul><li><a href="/2019/11/24/Introduction-to-PCIe-Address-Translation-Services/">Introduction to PCIe Address Translation Services</a></li><li><a href="/2019/11/24/Introduction-to-PCIe-Access-Control-Services/">Introduction to PCIe Access Control Services</a></li><li>PCIe Alternative Routing-ID Interpretation (ARI)<ul><li>Enable up-to 256 functions for single PCI Express component</li></ul></li></ul></li><li>PCIe config space位于MMIO空间内</li></ol><h3 id="2-motivation"><a href="#2-motivation" class="headerlink" title="2. motivation"></a>2. motivation</h3><p>推荐论文：High Performance Network Virtualization with SRIOV</p><p>可阅读<a href="https://github.com/liujunming/paper_reading_notes/issues/1" target="_blank" rel="noopener">Junming’s notes</a>。</p><p><img src="https://user-images.githubusercontent.com/11829057/97032861-0ac62400-1595-11eb-8a98-412ffb6a57b4.png" alt></p><p><img src="https://user-images.githubusercontent.com/11829057/97033169-81fbb800-1595-11eb-8db4-94d969346946.png" alt></p><p><img src="https://user-images.githubusercontent.com/11829057/97033444-f33b6b00-1595-11eb-940d-2d687db55fc7.png" alt></p><p><img src="https://user-images.githubusercontent.com/11829057/97034420-7dd09a00-1597-11eb-9027-03c31b5234ff.png" alt></p><p><img src="https://user-images.githubusercontent.com/11829057/97034474-904ad380-1597-11eb-9e00-e52f8fa7d5d1.png" alt></p><h3 id="3-details"><a href="#3-details" class="headerlink" title="3. details"></a>3. details</h3><p><strong>BIOS should be able to enumerate SR-IOV capable device and allocate MMIO (Memory mapped IO) resource for VFs.</strong></p><p><a href="https://projectacrn.github.io/latest/tutorials/sriov_virtualization.html#sr-iov-extended-capability" target="_blank" rel="noopener">SR-IOV Extended Capability</a> The SR-IOV Extended Capability defined here is a PCIe extended capability that must be implemented in each PF device that supports the SR-IOV feature. This capability is used to describe and control a PF’s SR-IOV capabilities.</p><h4 id="3-1-the-differences-between-a-normal-passthrough-device-and-SR-IOV-VF-device"><a href="#3-1-the-differences-between-a-normal-passthrough-device-and-SR-IOV-VF-device" class="headerlink" title="3.1 the differences between a normal passthrough device and SR-IOV VF device"></a>3.1 the differences between a normal passthrough device and SR-IOV VF device</h4><ol><li>physical device detection</li></ol><p>The hypervisor uses <code>Subsystem Vendor ID</code> to detect the SR-IOV VF physical device instead of <code>Vendor ID</code> since no valid <code>Vendor ID</code> exists for the SR-IOV VF physical device. </p><ol start="2"><li>BARs initialization</li></ol><p>The VF BARs are initialized by its associated PF’s SR-IOV capabilities, not PCI standard BAR registers. </p><ol start="3"><li>MSI-X initialization</li></ol><p>The MSI-X mapping base address is also from the PF’s SR-IOV capabilities, not PCI standard BAR registers.</p><h4 id="3-2-VF的bdf-number如何分配"><a href="#3-2-VF的bdf-number如何分配" class="headerlink" title="3.2 VF的bdf number如何分配"></a>3.2 VF的bdf number如何分配</h4><p>Routing ID就是BDF number,<strong>即采用Bus Number、Device Number和Function Number来确定目标设备的位置的id。</strong></p><p>SR-IOV Extended Capability中用FirstVF Offset和VF Stride来标记VF的Routing ID。VF的Routing ID是以PF的Routing ID值为参考来计算的。</p><p><strong>FirstVF Offset</strong>：第一个VF相对PF的Routing ID的偏移量</p><p><strong>VF Stride</strong>： 相邻VF之间的Routing ID的偏移量</p><p>PF的Routing ID在PF枚举之后就已经分配好了。PF的驱动程序通过配置SR-IOV Extended Capability，打开这个PF关联的VF之后，通过<strong>FirstVF Offset和VF Stride</strong>就能计算出VF们的Routing ID。</p><h4 id="3-3-VF的BAR空间如何分配"><a href="#3-3-VF的BAR空间如何分配" class="headerlink" title="3.3 VF的BAR空间如何分配"></a>3.3 VF的BAR空间如何分配</h4><p>VF的BAR[n]空间是通过PF的SR-IOV Capability中每个VF_BAR[n]来分配的，和VF Configuration Space的BAR无关。</p><p><img src="/images/2020/10/25.PNG" alt></p><h4 id="3-4-ACRN-Enable-SR-IOV-Virtualization"><a href="#3-4-ACRN-Enable-SR-IOV-Virtualization" class="headerlink" title="3.4 ACRN Enable SR-IOV Virtualization"></a>3.4 ACRN Enable SR-IOV Virtualization</h4><p>建议阅读<a href="https://projectacrn.github.io/latest/tutorials/sriov_virtualization.html" target="_blank" rel="noopener">ACRN Enable SR-IOV Virtualization</a>。😊</p><hr><p>参考资料：</p><ol><li>Chapter 9 of PCI-SIG’s <a href="https://pcisig.com/pci-express-architecture-configuration-space-test-specification-revision-40-version-10" target="_blank" rel="noopener">PCI Express Base Specification Revision 4.0, Version 1.0</a></li><li><a href="https://www.snia.org/sites/default/orig/sdc_archives/2010_presentations/thursday/RichardSolomon_PCI_Express.pdf" target="_blank" rel="noopener">RichardSolomon_PCI_Express.pdf</a></li><li><a href="https://projectacrn.github.io/latest/tutorials/sriov_virtualization.html" target="_blank" rel="noopener">ACRN Enable SR-IOV Virtualization</a></li><li><a href="https://blog.csdn.net/u010443710/article/details/104756445" target="_blank" rel="noopener">SR-IOV及linux驱动浅析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文只介绍SR-IOV的基本内容，并不能cover SR-IOV的全部知识点。
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/tags/PCI-PCIe/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about pause loop exiting</title>
    <link href="http://liujunming.github.io/2020/10/23/Some-notes-about-pause-loop-exiting/"/>
    <id>http://liujunming.github.io/2020/10/23/Some-notes-about-pause-loop-exiting/</id>
    <published>2020-10-23T00:59:55.000Z</published>
    <updated>2020-12-01T11:31:02.531Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-background"><a href="#1-background" class="headerlink" title="1. background"></a>1. background</h3><p>Spin-locking code typically uses <code>PAUSE</code> instructions in a loop.<a id="more"></a></p><p>For more details, please refer to <a href="/2020/05/01/Introduction-to-halt-pause-monitor-mwait-instruction/#pause">pause</a>.</p><h3 id="2-motivation"><a href="#2-motivation" class="headerlink" title="2. motivation"></a>2. motivation</h3><p>为什么需要pause loop exiting(ple)这一feature呢?<br><img src="/images/2020/10/21.PNG" alt></p><p><img src="/images/2020/10/22.PNG" alt></p><p><img src="/images/2020/10/23.PNG" alt></p><p><img src="/images/2020/10/24.PNG" alt></p><h3 id="3-details"><a href="#3-details" class="headerlink" title="3. details"></a>3. details</h3><p>Basic Exit Reason 40<br><img src="/images/2020/10/18.PNG" alt></p><p>PLE_Gap - upper bound on the amount of time between two successive executions of PAUSE in a loop.<br>PLE_Window - upper bound on the amount of time a guest is allowed to execute in a PAUSE loop</p><p>If the time, between this execution of PAUSE and previous one, exceeds the PLE_Gap, processor consider this PAUSE belongs to a new loop. Otherwise, processor determins the the total execution time of this loop(since 1st PAUSE in this loop), and triggers a VM exit if total time exceeds the PLE_Window.</p><p>Pause-Loop Exiting can be used to detect Lock-Holder Preemption, where one VCPU is sched-out after hold a spinlock, then other VCPUs for same lock are sched-in to waste the CPU time.</p><p>个人感觉PLE_Gap与PLE_Window的设置，就是调参吧。</p><hr><p>参考资料：</p><ol><li><a href="https://surriel.com/system/files/riel_t_1620_kvm_performance.pdf" target="_blank" rel="noopener">riel_t_1620_kvm_performance.pdf</a></li><li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/linux-containers-hypervisor-based-vms-paper.pdf" target="_blank" rel="noopener">linux-containers-hypervisor-based-vms-paper.pdf</a></li><li><a href="https://kernel-team.narkive.com/x1rgNbzk/patch-0-2-kvm-add-support-for-pause-loop-exit" target="_blank" rel="noopener">KVM: add support for Pause-Loop exit</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-background&quot;&gt;&lt;a href=&quot;#1-background&quot; class=&quot;headerlink&quot; title=&quot;1. background&quot;&gt;&lt;/a&gt;1. background&lt;/h3&gt;&lt;p&gt;Spin-locking code typically uses &lt;code&gt;PAUSE&lt;/code&gt; instructions in a loop.
    
    </summary>
    
      <category term="VT-x" scheme="http://liujunming.github.io/categories/VT-x/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Concurrency" scheme="http://liujunming.github.io/tags/Concurrency/"/>
    
      <category term="VT-x" scheme="http://liujunming.github.io/tags/VT-x/"/>
    
  </entry>
  
  <entry>
    <title>VT-d Posted Interrupt</title>
    <link href="http://liujunming.github.io/2020/10/11/VT-d-Posted-Interrupt/"/>
    <id>http://liujunming.github.io/2020/10/11/VT-d-Posted-Interrupt/</id>
    <published>2020-10-11T11:23:20.000Z</published>
    <updated>2020-10-23T15:18:20.489Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍VT-d Posted Interrupt的相关内容。首先会以一个例子介绍Posted interrupt的motivation；然后详细阐述涉及到的硬件和软件细节；接下来会介绍不同vCPU状态下的差异化处理；最后总结下本文。<a id="more"></a></p><p>阅读本文前，需先阅读以下文章：</p><ol><li><a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/" target="_blank" rel="noopener">Intel SDM Chapter 29: APIC Virtualizaton &amp; Virtual Interrupts</a></li><li><a href="/2020/10/07/Introduction-to-Posted-interrupt/">Introduction to CPU-based Posted-interrupt</a></li><li><a href="/2020/10/10/VT-d-Interrupt-Remapping/">VT-d Interrupt Remapping</a></li></ol><h3 id="1-terms"><a href="#1-terms" class="headerlink" title="1. terms"></a>1. terms</h3><ul><li>PI(Posted Interrupt)</li><li>hv(hypervisor)</li><li>VM(Virtual Machine)</li><li>IRTE(Interrupt Remapping Table Entry)</li><li>PID(Posted Interrupt Descriptor)</li><li>PIR( Posted Interrupt Requests)</li><li>ON(Outstanding Notification)</li><li>NV(Notification Vector)</li><li>ANV(Active Notification Vector)</li><li>WNV(Wake-up Notification Vector)</li><li>ple(pause loop exiting)</li></ul><h3 id="2-motivation"><a href="#2-motivation" class="headerlink" title="2.  motivation"></a>2.  motivation</h3><p>在<a href="/2020/10/10/VT-d-Interrupt-Remapping/#demo-usage">VT-d Interrupt Remapping demo usage</a>中，如果目标vCPU正在运行，但是，当物理CPU接受到physical interrupt时，需发生VM-Exit，由hv为guest注入vector为30的virtual中断。</p><p>思考下：是否可以省去如下步骤：<em>当物理CPU接受到physical interrupt时，需发生VM-Exit，由hv为guest注入vector为30的virtual中断</em>。由硬件为正在运行的vCPU直接注入vector为30的virtual 中断(这样避免了一次VM-Exit)，而这正是VT-d PI所能完成的功能。</p><h3 id="3-details"><a href="#3-details" class="headerlink" title="3. details"></a>3. details</h3><h4 id="3-1-CAP-REG的PI位"><a href="#3-1-CAP-REG的PI位" class="headerlink" title="3.1 CAP_REG的PI位"></a>3.1 CAP_REG的PI位</h4><p>IOMMU通过Capability Register(CAP_REG)的PI位来报告interrupt posting capability。<br><img src="/images/2020/10/7.PNG" alt></p><h4 id="3-2-IRTE"><a href="#3-2-IRTE" class="headerlink" title="3.2 IRTE"></a>3.2 IRTE</h4><p>VT-d PI是VT-d Interrupt Remapping的一个扩展功能。根据<a href="/2020/10/10/VT-d-Interrupt-Remapping/">Interrupt Remapping</a>可知， 所有的Remapping格式中断请求都需要通过中断重映射表来投递， IRTE中的Mode域(IM)用来指定这个remappable中断请求是interrupt-remapping方式还是interrupt-posting方式。</p><p>如果IRTE的IM位为1，则VT-d硬件将会以PI的形式来解析该IRTE，如下图所示：<br><img src="/images/2020/10/9.PNG" alt></p><p>需要关注PI格式的IRTE的以下几个field：</p><ol><li>Posted Descriptor Address Low/High，该区域保存一个指向内存的指针，该指针指向的位置就是PID。</li><li>Urgent位，该位用于表示该中断是否是紧急的，即是否需要目标CPU立即响应。</li><li>Vector用于指定PID.PIR中哪个bit要置位。</li></ol><h4 id="3-3-PID"><a href="#3-3-PID" class="headerlink" title="3.3 PID"></a>3.3 PID</h4><p>每个PID的大小为64 Byte，直接被硬件用来记录将要post的中断请求。其格式如下所示：<br><img src="/images/2020/10/8.PNG" alt></p><ol><li>Posted Interrupt Request (PIR)域，一共256 bit，每个bit对应一个中断向量，当VT-d硬件将中断请求post过来的时候，IRTE.Vector对应的bit将会被置起。</li><li><p>Outstanding Notification (ON)域，表示该PID当前是否已经发出了一个Notification Event等待CPU的处理。</p><ul><li><p>当VT-d硬件将中断请求记录到PIR的时候，如果ON为0，并且允许立即发出一个Notification Event时，则将会将ON置起来，并且产生一个Notification Event；如果ON已经被置起来，则不会产生一个Notification Event。</p></li><li><p>ON的清零。</p><p><img src="/images/2020/10/16.PNG" alt></p></li></ul></li><li>Suppress Notification (SN)域，表示当PIR寄存器记录到non-urgent的中断时，是否不发出Notification Event，如果该位为1，则当PIR记录到non-urgent中断的时候，不发出Notification Event，并且不更改Outstanding Notification位的值。</li><li>Notification Vector (NV)域，表示如果发出Notification Event时，具体的Vector值。</li><li>Notification Destination (NDST)域，表示如果发出Notification Event时，要传递的物理CPU的LAPIC ID。</li></ol><h4 id="3-4-硬件上Posted-Interrupt的处理过程"><a href="#3-4-硬件上Posted-Interrupt的处理过程" class="headerlink" title="3.4 硬件上Posted Interrupt的处理过程"></a>3.4 硬件上Posted Interrupt的处理过程</h4><p><img src="/images/2020/10/15.PNG" alt></p><p>PST即IRTE中的Interrupt Mode位。</p><p><img src="/images/2020/10/10.jpg" alt></p><p>当VT-d硬件接收到其旗下I/O设备传递过来的中断请求时，会先查看自己的中断重定向功能是否打开，如果没有打开则，直接上传给LAPIC。如果中断重定向功能打开，则会查看中断请求的格式，如果是不可重定向格式，则直接将中断请求提交给LAPIC。如果是可重定向的格式，则会根据算法计算Interrupt_Index值，对中断重定向表进行索引找到相应的IRTE。然后，查看IRTE中的Interrupt Mode，如果为0，则该IRTE的格式为Remapped Format，即立即根据IRTE的信息产生一个新的中断请求，提交到LAPIC。如果Interrupt Mode为1，则表示该IRTE的格式为Posted Format，根据IRTE中提供的PID的地址，在内存中找到相应PID，并根据其ON、URG和SN的设置判断是否需要立即产生一个Notification Event，如果不需要，则只是将该中断信息记录到PID.PIR中，等待hv的后续处理(会在<a href="/2020/10/11/VT-d-Posted-Interrupt/#4-5-vCPU-is-ready-to-run-or-halted-when-Notification-Event-happen">vCPU is ready-to-run or halted when Notification Event happen</a>中介绍)。如果需要立即产生一个Notification Event，则根据PID（会提供目标APIC ID、vector、传输模式和触发模式等信息）产生一个Notification Event，同时将ON置位。</p><p>硬件在对PID进行修改的时候，要保证该修改是原子操作，即对PID的读取、修改和写入必须是原子操作，并且在写入之后，要保证相应内存在各个cache agent之间的一致性，即所有的CPU应该立马能够看到该内存修改。</p><h4 id="3-5-the-relationship-with-CPU-based-Posted-interrupt"><a href="#3-5-the-relationship-with-CPU-based-Posted-interrupt" class="headerlink" title="3.5 the relationship with CPU-based Posted-interrupt"></a>3.5 the relationship with CPU-based Posted-interrupt</h4><p>CPU-based Posted-interrupt需要与IOMMU协同工作才能实现VT-d Posted Interrupt feature。</p><p>有三点需要注意：</p><ol><li>enable APICv</li><li>设置VMCS的posted-interrupt descriptor，这正是IRTE中Posted Descriptor Address Low/High所设置的值。</li><li>设置VMCS的posted-interrupt notification vector为ANV(下节会详细介绍)。</li></ol><p><img src="/images/2020/10/13.PNG" alt><br><img src="/images/2020/10/14.PNG" alt></p><h3 id="4-不同vCPU状态下的差异化处理"><a href="#4-不同vCPU状态下的差异化处理" class="headerlink" title="4. 不同vCPU状态下的差异化处理"></a>4. 不同vCPU状态下的差异化处理</h3><h4 id="4-1-Background"><a href="#4-1-Background" class="headerlink" title="4.1 Background"></a>4.1 Background</h4><p>在vCPU调度的过程中，vCPU会有如下三种状态:</p><ol><li>当vCPU被scheduler选中来运行的时候，此时vCPU的状态为’active’。</li><li>当vCPU被抢占（Preempted），例如时间片到期了，此时vCPU的状态为’ready-to-run’。</li><li>当vCPU执行了<code>hlt</code>指令或者触发了<a href="/2020/10/23/Some-notes-about-pause-loop-exiting/">ple</a>，hv也会干预进来将vCPU给block出来，此时vCPU状态为’halted ‘。</li></ol><h4 id="4-2-ANV-and-WNV"><a href="#4-2-ANV-and-WNV" class="headerlink" title="4.2 ANV and WNV"></a>4.2 ANV and WNV</h4><p>hv需要为每个vCPU分配物理中断vector:<br>第一个称作Active Notification Vector（ANV），该Vector对应到vCPU的状态为active时，Notification Event所使用的中断vector(需要设置VMCS的posted-interrupt notification vector为ANV)。</p><p>第二个称作Wake-up Notification Vector（WNV），该Vector对应到目标vCPU不在当前物理CPU上执行时，由于Urgent被置起来产生的Notification Event所使用的中断Vector。</p><blockquote><p>在active状态下，PID.NV的值就是ANV。在ready-to-run或者halted状态下，PID.NV的值就是WNV。这里的ANV和WNV可以是同一个值。</p></blockquote><p>hv需要保证的是：运行在同一个pCPU上的所有vCPU的PID.NV值不同。</p><p>详情可参考:<a href="https://projectacrn.github.io/latest/developer-guides/hld/hv-dev-passthrough.html#vt-d-interrupt-remapping" target="_blank" rel="noopener">ACRN posted interrupt</a></p><h4 id="4-3-vCPU-Scheduling"><a href="#4-3-vCPU-Scheduling" class="headerlink" title="4.3 vCPU Scheduling"></a>4.3 vCPU Scheduling</h4><p><img src="/images/2020/10/12.PNG" alt></p><p>只需理解状态转换，对于‘NV’的设置是hv specific的，无需深究。</p><h4 id="4-4-vCPU-is-active-when-Notification-Event-happen"><a href="#4-4-vCPU-is-active-when-Notification-Event-happen" class="headerlink" title="4.4 vCPU is active when Notification Event happen"></a>4.4 vCPU is active when Notification Event happen</h4><p>guest在Non-Root下就能直接处理此中断，而不需要hv的参与。</p><p>详细步骤请参考：<a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/#posted-interrupt" target="_blank" rel="noopener">Posted Interrupt</a></p><h4 id="4-5-vCPU-is-ready-to-run-or-halted-when-Notification-Event-happen"><a href="#4-5-vCPU-is-ready-to-run-or-halted-when-Notification-Event-happen" class="headerlink" title="4.5 vCPU is ready-to-run or halted when Notification Event happen"></a>4.5 vCPU is ready-to-run or halted when Notification Event happen</h4><p>WNV的handler:</p><p>如果vCPU的state为halted，则需要先将vCPU的状态设置为ready-to-run。</p><p>handler会调度vCPU。</p><p>扫描PID.PIR,检测是否有处于pending状态的posted interrupt请求；如果有处于pending状态的posted interrupt请求，hv会在LAPIC上生成一个vector号为ANV的self-IPI(注意：在还未真正enter guest之前,当前物理CPU处于关中断状态)。 当进入Non-Root模式时，物理IRR寄存器中的ANV位会被置上，硬件(CPU)会处理posted interrupt。该中断的处理类似于vCPU处于active状态时，接收到了ANV的中断请求，vCPU可以直接对其进行处理，不需要hv的参与。</p><h3 id="5-summary"><a href="#5-summary" class="headerlink" title="5. summary"></a>5. summary</h3><p>VT-d PI advantages</p><ul><li>External interrupts from direct-assigned devices are delivered to guest running in non-root mode directly</li><li>Improve Interrupt virtualization efficiency, e.g. Less VM-Exits.</li><li>Simplify interrupt migration<ul><li>更新PID.NDST</li><li>如果per-PCPU的IDT向量管理不一样，还需要更新PCPU IDT的vector<br><img src="/images/2020/10/17.PNG" alt></li></ul></li><li>Consume less physical interrupts</li></ul><hr><p>参考资料：</p><ol><li><a href="https://kernelgo.org/posted-interrupt.html" target="_blank" rel="noopener">fangying:VT-d Posted Interrupt</a></li><li><a href="https://zhuanlan.zhihu.com/p/51018597" target="_blank" rel="noopener">河马 Intel VT-d（4）- Interrupt Posting</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/VT-d%20Posted%20Interrupts-final%20.pdf" target="_blank" rel="noopener">Feng Wu:VT-d Posted Interrupts </a></li><li><a href="https://lettieri.iet.unipi.it/virtualization/2018/passthrough.pdf" target="_blank" rel="noopener">Hardware passthrough</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍VT-d Posted Interrupt的相关内容。首先会以一个例子介绍Posted interrupt的motivation；然后详细阐述涉及到的硬件和软件细节；接下来会介绍不同vCPU状态下的差异化处理；最后总结下本文。
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
      <category term="VT-d" scheme="http://liujunming.github.io/tags/VT-d/"/>
    
  </entry>
  
  <entry>
    <title>VT-d Interrupt Remapping</title>
    <link href="http://liujunming.github.io/2020/10/10/VT-d-Interrupt-Remapping/"/>
    <id>http://liujunming.github.io/2020/10/10/VT-d-Interrupt-Remapping/</id>
    <published>2020-10-10T11:20:19.000Z</published>
    <updated>2020-10-13T22:52:43.868Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍VT-d Interrupt Remapping的motivation，然后推荐一篇介绍Interrupt Remapping细节的文章，最后以一个具体的例子来展示VT-d Interrupt Remapping的用法。<a id="more"></a></p><h3 id="motivation"><a href="#motivation" class="headerlink" title="motivation"></a>motivation</h3><ol><li>Supporting isolation and routing of interrupts from devices and external interrupt controllers to appropriate VMs.</li><li>Supporting x2APIC</li></ol><h3 id="details"><a href="#details" class="headerlink" title="details"></a>details</h3><p>可以详细阅读此文。<br><a href="https://kernelgo.org/interrupt-remapping.html" target="_blank" rel="noopener">https://kernelgo.org/interrupt-remapping.html</a></p><h3 id="demo-usage"><a href="#demo-usage" class="headerlink" title="demo usage"></a>demo usage</h3><p><img src="/images/2020/10/6.PNG" alt></p><p>以上图为例，将展示VT-d Interrupt Remapping的具体过程。</p><ol><li>当guest配置MSI address和MSI data时，hypervisor(hv)会trap，解析相关field，得到virtual interrupt的vector为30，而对应的physical interrupt的vector为60。这样hv会记录physical interrupt到virtual interrupt的映射(vector 60 -&gt; vector 30)。</li><li>分配一个IRTE并且按照IRTE的格式要求填好IRTE的每个属性。如：B:D.F, Vector(60), 运行目标vCPU的物理CPU的LAPIC ID。</li><li>按照Remapping format的格式对MSI进行编程。如：将Interrupt Format置1，设置中断的interrupt_index。</li><li>设置VMCS(configured to cause vmexit on external interrupt)。当物理CPU收到vector为60的中断时，会发生VM-Exit。</li><li>hv处理VM-Exit，根据physical interrupt到virtual interrupt的映射(vector 60 -&gt; vector 30)关系，为guest注入vector为30的interrupt。</li><li>VM-Entry到guest VM，process vector为30的interrupt。</li></ol><h3 id="rethinking-the-motivation"><a href="#rethinking-the-motivation" class="headerlink" title="rethinking the motivation"></a>rethinking the motivation</h3><p><img src="/images/2020/10/19.PNG" alt></p><p><img src="/images/2020/10/20.PNG" alt></p><p>两者可以完成相同的功能。那么为什么还要有VT-d Interrupt Remapping呢？</p><p>在<a href="https://invisiblethingslab.com/resources/2011/Software%20Attacks%20on%20Intel%20VT-d.pdf" target="_blank" rel="noopener">Following the White Rabbit:Software attacks against Intel(R) VT-d technology</a>一文中找到了答案：vulnerable to the BDF spoofing attack。</p><blockquote><p>Even though the interrupt remapping seems vulnerable to the BDF spoofing attack (just like DMA<br>remapping is), still we believe it has a potential to prevent all the above-mentioned MSI attacks, because we anticipate that none of the interrupt vector used in our attacks should be allowed to any devices in the system. In that case, BDF spoofing would not bring any advantage to the attacker, as there should be no device at all that the attacker might want to impersonate, which could deliver those dangerous interrupts, such as SIPI, syscall interrupts, or the #AC exception.</p></blockquote><blockquote><p>BDF spoofing is a type of a hardware attack against VT-d, where a malicious device generates PCIe packets with spoofed BDF address. </p></blockquote><p>说白了，VT-d Interrupt Remapping可以解决security问题。</p><hr><p>参考资料：</p><ol><li><a href="https://compas.cs.stonybrook.edu/~nhonarmand/courses/sp17/cse506/slides/hw_io_virtualization.pdf" target="_blank" rel="noopener">I/O Virtualization with Hardware Support</a></li><li><a href="https://invisiblethingslab.com/resources/2011/Software%20Attacks%20on%20Intel%20VT-d.pdf" target="_blank" rel="noopener">Following the White Rabbit:Software attacks against Intel(R) VT-d technology</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍VT-d Interrupt Remapping的motivation，然后推荐一篇介绍Interrupt Remapping细节的文章，最后以一个具体的例子来展示VT-d Interrupt Remapping的用法。
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
      <category term="VT-d" scheme="http://liujunming.github.io/tags/VT-d/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about APICv MSR-Based APIC Accesses</title>
    <link href="http://liujunming.github.io/2020/10/10/Some-notes-about-APICv-MSR-Based-APIC-Accesses/"/>
    <id>http://liujunming.github.io/2020/10/10/Some-notes-about-APICv-MSR-Based-APIC-Accesses/</id>
    <published>2020-10-10T05:11:33.000Z</published>
    <updated>2020-10-10T23:34:43.823Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/#msr-based-apic-accesses" target="_blank" rel="noopener">MSR-Based APIC Accesses</a></p><ol><li><p>Secondary Processor-Based VM-Execution Controls.Virtualize x2APIC Mode[bit 4] = 1时，VMCS中x2APIC MSR Bitmap的设置依然有效。</p></li><li><p>WRMSR ICR, no APIC Write VM Exit, has potential security issues?<br>Solution: set VMCS MSR Bitmap to trap ICR register write.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/#msr-based-apic-accesses&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MSR-Based APIC Ac
      
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about Interrupt Window and NMI Window</title>
    <link href="http://liujunming.github.io/2020/10/09/Some-notes-about-Interrupt-Window/"/>
    <id>http://liujunming.github.io/2020/10/09/Some-notes-about-Interrupt-Window/</id>
    <published>2020-10-09T03:25:32.000Z</published>
    <updated>2020-10-13T10:58:47.613Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Interrupt Window和NMI Window的相关知识点。<a id="more"></a></p><p>强烈建议在<a href="http://mmc.geofisica.unam.mx/acl/Textos/MaquinasVirtuales/CursoMaquinasVirtuales/Bibliograf%C3%ADaMaquinasVirtuales/Vtx.pdf" target="_blank" rel="noopener">Vtx.pdf</a>搜索Interrupt-window Exiting。</p><blockquote><p>Interrupt-window Exiting. The interrupt-window exiting control bit in the VM-execution controls causes VM exits when guest RFLAGS.IF is 1 and no other conditions block external interrupts. If the control is 1, a VM exit occurs at the beginning of any instruction at which RFLAGS.IF = 1 and on which the interruptibility state of the guest would allow delivery of an interrupt. For example: when the guest executes an STI instruction, RFLAGS = 1, and if at the completion of next instruction the interruptibility state masking due to STI is removed; a VM exit occurs if interruptwindow exiting control is 1. The interrupt-window exiting feature allows a VMM to queue a virtual interrupt to the guest when the guest is not in an interruptible state. The VMM can set the interrupt-window exiting control for the guest and depend on a VM exit to know when the guest becomes interruptible (and, therefore, when it can inject a virtual interrupt). The VMM can detect such VM exits by checking for the basic exit reason ‘interrupt-window’ (value = 7). Without interrupt-window exiting support, the VMM will need to poll and check the interruptibility state of the guest to deliver virtual interrupts.</p></blockquote><h3 id="1-Background"><a href="#1-Background" class="headerlink" title="1. Background"></a>1. Background</h3><ol><li>IRR不受IF(RFLAGS.IF)位的影响。</li><li>事件注入控制:<br><img src="/images/2020/10/5.PNG" alt></li></ol><h3 id="2-Interrupt-Window"><a href="#2-Interrupt-Window" class="headerlink" title="2. Interrupt Window"></a>2. Interrupt Window</h3><p>如果Guest正处在屏蔽外部中断的状态，即Guest的<code>RFLAGS.IF = 0</code>或<em>Guest Non-Register State.Interruptibility State</em>（<code>VMCS[0x4824](32 bit)</code>）的Bit 0 (Blocking by STI)和Bit 1 (Blocking by MOV-SS)不全为零，将不允许在VM Entry时进行Event Injection。为了向vCPU注入中断，可以临时设置<em>Primary Processor-Based VM-Execution Controls.Interrupt-Window Exiting</em> = 1，然后主动VM Entry进入Non-root模式。一旦CPU进入能够接收中断的状态，即<code>RFLAGS.IF = 1</code>且<em>Interruptibility State</em>[1:0] = 0，便会产生一个VM Exit（<code>VM Exit No.7</code> <strong>Interrupt Window</strong>），此时Hypervisor便可注入刚才无法注入的中断，并将<em>Interrupt-Window Exiting</em>重置为0。</p><p>值得注意的是：即使Guest的<code>RFLAGS.IF = 0</code>,Guest的IRR寄存器依然会置位，这个行为需要与native保持一致。</p><h3 id="3-NMI-Windows"><a href="#3-NMI-Windows" class="headerlink" title="3. NMI Windows"></a>3. NMI Windows</h3><p>Background可以参考<a href="/2020/10/09/Some-notes-about-x86-interrupt-preemption/">Some notes about x86 interrupt preemption</a>。</p><blockquote><p>NMI-window Exiting. If the “virtual NMIs” VM-execution is set, the processor tracks virtual-NMI blocking. The NMI-window exiting control bit in VM-execution controls causes VM exits when there is no virtualNMI blocking. For example, after execution of the IRET instruction, a VM exit occurs if NMIwindow exiting control is 1. The NMI-window exiting feature allows a VMM to queue a virtual NMI to a guest when the guest is not ready to receive NMIs. The VMM can set the NMI-window exiting control for the guest and depend on a VM exit to know when the guest becomes ready for NMIs (and, therefore, when it can inject a virtual NMI). The VMM can detect such VM exits by checking for the basic exit reason ‘NMI window’ (value = 8). Without NMI-window exiting support, the VMM will need to poll and check the interruptibility state of the guest to deliver virtual NMIs.</p></blockquote><hr><p>参考资料：</p><ol><li><a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/" target="_blank" rel="noopener">Intel SDM Chapter 29: APIC Virtualizaton &amp; Virtual Interrupts</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Interrupt Window和NMI Window的相关知识点。
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about x86 interrupt preemption</title>
    <link href="http://liujunming.github.io/2020/10/09/Some-notes-about-x86-interrupt-preemption/"/>
    <id>http://liujunming.github.io/2020/10/09/Some-notes-about-x86-interrupt-preemption/</id>
    <published>2020-10-09T00:05:47.000Z</published>
    <updated>2020-10-09T03:43:15.063Z</updated>
    
    <content type="html"><![CDATA[<p>x86 disables all local interrupts (except NMI of course) before jumping to the interrupt vector. </p><p>NMI可以打断除NMI以外的任意中断的处理。<br><a id="more"></a><br>结论说完了，介绍下background吧。</p><blockquote><p>If an interrupt or exception handler is called through an interrupt gate, the processor clears the interrupt enable (IF) flag in the EFLAGS register to prevent subsequent interrupts from interfering with the execution of the handler. </p></blockquote><p>From SDM Volume 1</p><blockquote><p>While an NMI interrupt handler is executing, the processor blocks delivery of subsequent NMIs until the next execution of the IRET instruction. This blocking of NMIs prevents nested execution of the NMI handler</p></blockquote><p>From SDM Volume 3</p><hr><p>参考资料：</p><ol><li><a href="https://stackoverflow.com/questions/11403915/can-an-interrupt-handler-be-preempted-by-the-same-interrupt-handler" target="_blank" rel="noopener">Can an interrupt handler be preempted by the same interrupt handler?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;x86 disables all local interrupts (except NMI of course) before jumping to the interrupt vector. &lt;/p&gt;
&lt;p&gt;NMI可以打断除NMI以外的任意中断的处理。&lt;br&gt;
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>The motivation of APICv</title>
    <link href="http://liujunming.github.io/2020/10/08/The-motivation-of-APICv/"/>
    <id>http://liujunming.github.io/2020/10/08/The-motivation-of-APICv/</id>
    <published>2020-10-08T10:35:32.000Z</published>
    <updated>2020-10-08T14:04:17.109Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容转载自:<a href="https://software.intel.com/content/www/us/en/develop/blogs/apic-virtualization-performance-testing-and-iozone.html" target="_blank" rel="noopener">APIC Virtualization Performance Testing and Iozone*</a>。</p><a id="more"></a><p>Virtual machine monitors (VMM) emulate most guest access to interrupts and the advanced programmable interrupt controller (APIC) in a virtual environment.  They also virtualize all guest interrupts. These activities require the exit and reentry of the virtual machines (VM), but they are time consuming and are a major source of overhead.  in order to minimize that effect, the latest Intel(R) Xeon(R) processors, such as the Intel(R) Xeon(R) E5-2600 v2 Product Family, emulate those activities in the hardware. </p><p><img src="/images/2020/10/4.jpg" alt></p><center>Figure 1 - VM-VMM interaction with and without APICv</center><p>Figure 1 shows that all virtualized activities relating interrupts and APIC to and from the guest OS have to go through VMM in systems without APICv; however, in systems with APICv, they are executed in the hardware, not in the VMM.  This way all activities can stay inside the VM, thus eliminating the need to issue the “VM exit” command; this change results in reduced overhead and increased I/O throughput.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容转载自:&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/blogs/apic-virtualization-performance-testing-and-iozone.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APIC Virtualization Performance Testing and Iozone*
&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to CPU-based Posted-interrupt</title>
    <link href="http://liujunming.github.io/2020/10/07/Introduction-to-Posted-interrupt/"/>
    <id>http://liujunming.github.io/2020/10/07/Introduction-to-Posted-interrupt/</id>
    <published>2020-10-07T12:46:55.000Z</published>
    <updated>2020-10-09T04:20:36.209Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对SDM CPU-based <a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/#posted-interrupt" target="_blank" rel="noopener">Posted Interrupt</a>做相关补充。对于VT-d的Posted-interrupt，本文并不涉及。</p><a id="more"></a><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Virtual-Interrupt Delivery利用硬件功能解决了如下两个问题：第一个是需要Hypervisor手动模拟Interrupt Acknowledgement(要先从IRR中取出最高优先级的中断，设置ISR中对应位)、Interrupt Delivery(EOI)；第二个是有时需要产生<strong>Interrupt Window</strong> VM Exit以正确注入中断。</p><p>Posted Interrupt是对Virtual-Interrupt Delivery的进一步发展，让我们可以省略Interrupt Acceptance的过程，直接令正在运行的vCPU收到一个虚假中断，而不产生VM Exit。它可以向正在运行的vCPU注入中断，配合VT-d的Posted Interrupt功能，还可以实现Passthrough设备的中断直接发给vCPU而不引起VM Exit。</p><h3 id="CPU-based-Posted-Interrupt-Processing"><a href="#CPU-based-Posted-Interrupt-Processing" class="headerlink" title="CPU-based Posted-Interrupt Processing"></a>CPU-based Posted-Interrupt Processing</h3><p><img src="/images/2020/10/1.PNG" alt><br><img src="/images/2020/10/2.PNG" alt></p><h3 id="Usage-Examples-and-Enabling-Posted-Interrupt-Processing-in-KVM"><a href="#Usage-Examples-and-Enabling-Posted-Interrupt-Processing-in-KVM" class="headerlink" title="Usage Examples and Enabling Posted-Interrupt Processing in KVM"></a>Usage Examples and Enabling Posted-Interrupt Processing in KVM</h3><p><img src="/images/2020/10/3.PNG" alt><br>Send the event notification:给vCPU所在的CPU发送一个Notification Event，即中断向量号为Posted-Interrupt Notification Vector的中断。</p><blockquote><p>假设现在想给一个正在运行的vCPU注入中断，除非该vCPU正在处理中断，否则仅凭Virtual-Interrupt Delivery，仍需要令其VM Exit并设置RVI，以便在VM Entry时触发Virtual-Interrupt Delivery。若使用Posted Interrupt，则可以设置PIR中对应位，然后给vCPU所在的CPU发送一个Notification Event，即中断向量号为Posted-Interrupt Notification Vector的中断，这样vCPU无需VM Exit就可以被注入一个甚至多个中断。</p></blockquote><hr><p>参考链接：</p><ol><li><a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/" target="_blank" rel="noopener">Intel SDM Chapter 29: APIC Virtualizaton &amp; Virtual Interrupts</a></li><li><a href="https://www.linux-kvm.org/images/7/70/2012-forum-nakajima_apicv.pdf" target="_blank" rel="noopener">Enabling Optimized Interrupt/APIC Virtualization in KVM </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是对SDM CPU-based &lt;a href=&quot;https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch29/#posted-interrupt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Posted Interrupt&lt;/a&gt;做相关补充。对于VT-d的Posted-interrupt，本文并不涉及。&lt;/p&gt;
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about CVE-2016-5195</title>
    <link href="http://liujunming.github.io/2020/10/05/Some-notes-about-CVE-2016-5195/"/>
    <id>http://liujunming.github.io/2020/10/05/Some-notes-about-CVE-2016-5195/</id>
    <published>2020-10-05T05:51:00.000Z</published>
    <updated>2020-10-07T17:01:32.903Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对<a href="https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails" target="_blank" rel="noopener">CVE-2016-5195</a>做相关的notes。<a id="more"></a><br><a href="http://huntcve.github.io/2017/07/04/dirtycow/" target="_blank" rel="noopener">DirtyCow 漏洞分析2</a>分析的较好。</p><h3 id="detail"><a href="#detail" class="headerlink" title="detail"></a>detail</h3><ol><li>强行写入的内容被写到<strong>内核COW出来的拷贝页</strong>中，供进程使用。</li><li>If CR0.WP = 0, data may be written to any supervisor-mode address. <em>生成一个新的可写COW页面，并标记为脏页面，同时保留其只读属性</em></li></ol><h3 id="material"><a href="#material" class="headerlink" title="material"></a>material</h3><ol><li><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails" target="_blank" rel="noopener">VulnerabilityDetails</a></li><li><a href="http://huntcve.github.io/2017/07/04/dirtycow/" target="_blank" rel="noopener">DirtyCow 漏洞分析2</a></li><li><a href="https://www.anquanke.com/post/id/84851" target="_blank" rel="noopener">深入解读脏牛Linux本地提权漏洞</a></li><li><a href="http://pwn4.fun/2017/07/14/Dirty-COW%EF%BC%88CVE-2016-5195%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">Dirty COW（CVE-2016-5195）漏洞分析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是对&lt;a href=&quot;https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVE-2016-5195&lt;/a&gt;做相关的notes。
    
    </summary>
    
      <category term="Security" scheme="http://liujunming.github.io/categories/Security/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Security" scheme="http://liujunming.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about CVE-2018-12207</title>
    <link href="http://liujunming.github.io/2020/09/30/Some-notes-about-CVE-2018-12207/"/>
    <id>http://liujunming.github.io/2020/09/30/Some-notes-about-CVE-2018-12207/</id>
    <published>2020-09-30T12:10:05.000Z</published>
    <updated>2020-10-07T17:01:32.903Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对<a href="https://software.intel.com/security-software-guidance/api-app/insights/deep-dive-machine-check-error-avoidance-page-size-change" target="_blank" rel="noopener">CVE-2018-12207</a>做相关的background补充。原文写的相当好，建议详读。<a id="more"></a></p><h3 id="Description-of-errata"><a href="#Description-of-errata" class="headerlink" title="Description of errata"></a>Description of errata</h3><p>Software sequences that may lead to machine check error code 0150H can be summarized as follows:</p><ol><li>Code is fetched from a linear address translated using a 4 KB translation cached in the ITLB.</li><li>Software modifies the paging structures so that the same linear address is translated using a large page (2 MB, 4 MB, or 1 GB) with a different physical address or memory type.</li><li>After the paging structure modification, but before software invalidates any ITLB entries for the linear address, code fetch happens again on the same linear address.</li><li>This may cause a machine-check error (IA32_MCi_STATUS.MCACOD=150H), which can result in a system hang or shutdown.</li></ol><h3 id="extension1"><a href="#extension1" class="headerlink" title="extension1"></a>extension1</h3><p>The VMM can use Extended Page Tables (EPT) to enforce that each guest physical address is 4 KB in size and that guest software cannot change the hardware page size for translations.</p><blockquote><p>For correctness, the TLB must consider the page size for a given translation to be the smaller of the nested and guest page sizes.</p></blockquote><p>From ASPLOS’08 《Accelerating Two-Dimensional Page Walks》2.4 Large Page Size。</p><h3 id="extension2"><a href="#extension2" class="headerlink" title="extension2"></a>extension2</h3><p>The sequence above requires bit 10 (Execute access for user-mode linear address) to be treated in the same manner as bit 2 when mode-based execution controls are active (the mode-based execute control for EPT feature is present and the VM execution control is set to 1).</p><ul><li><p>各级页表项的第2位为X (eXecute)，取1表示可执行</p><ul><li>若Secondary Processor-Based VM-Execution Controls.Mode-based execute control for EPT[bit 22]取1，则该位取1仅表示对于Guest的内核页可执行，不表示对于Guest的用户页可执行</li></ul></li><li><p>各级页表项的第10位为XU (eXecute for User)，取1表示对于Guest的用户页可执行</p><ul><li>仅当Secondary Processor-Based VM-Execution Controls.Mode-based execute control for EPT[bit 22]取1时有效，否则该位会被忽略</li></ul></li></ul><p>From <a href="https://tcbbd.moe/ref-and-spec/intel-sdm/sdm-vmx-ch28/" target="_blank" rel="noopener">Intel SDM Chapter 28: VMX Support for Address Translation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是对&lt;a href=&quot;https://software.intel.com/security-software-guidance/api-app/insights/deep-dive-machine-check-error-avoidance-page-size-change&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVE-2018-12207&lt;/a&gt;做相关的background补充。原文写的相当好，建议详读。
    
    </summary>
    
      <category term="Security" scheme="http://liujunming.github.io/categories/Security/"/>
    
    
      <category term="内存管理" scheme="http://liujunming.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="Security" scheme="http://liujunming.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Without EPT or SPT, guest still can access memory?</title>
    <link href="http://liujunming.github.io/2020/08/30/Without-EPT-or-SPT-guest-still-can-access-memory/"/>
    <id>http://liujunming.github.io/2020/08/30/Without-EPT-or-SPT-guest-still-can-access-memory/</id>
    <published>2020-08-30T01:28:10.000Z</published>
    <updated>2020-08-30T01:42:12.121Z</updated>
    
    <content type="html"><![CDATA[<p>Without EPT or SPT(shadow page table), guest can access memory?<br><a id="more"></a><br>在看kvm-unit-test时，发现：没有为guest创建EPT or SPT，但是，guest依然可以访问memory，这是怎么做到的呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_vmcs_guest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 26.3 CHECKING AND LOADING GUEST STATE */</span></span><br><span class="line">ulong guest_cr3;</span><br><span class="line"><span class="comment">/* 26.3.1.1 */</span></span><br><span class="line">guest_cr3 = read_cr3();</span><br><span class="line">...</span><br><span class="line">vmcs_write(GUEST_CR3, guest_cr3);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案便在上述代码片段中：将host的cr3赋值给guest的cr3。这样，直接将MMU pass-thru给guest，并且guest和host复用相同的页表。</p><p>这样比较tricky做法的缺点是:失去了隔离性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Without EPT or SPT(shadow page table), guest can access memory?&lt;br&gt;
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Some notes about Queued Invalidation in VT-d</title>
    <link href="http://liujunming.github.io/2020/08/29/Some-notes-about-Queued-Invalidaion-in-VT-d/"/>
    <id>http://liujunming.github.io/2020/08/29/Some-notes-about-Queued-Invalidaion-in-VT-d/</id>
    <published>2020-08-29T12:48:47.000Z</published>
    <updated>2020-10-23T15:18:20.487Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍VT-d中Queued Invalidation的相关知识点。<br><a id="more"></a></p><p>Queued Invalidation的详细内容请参考VT-d spc的6.5.2节。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>spec中的描述如下：</p><blockquote><p>The queued invalidation provides an advanced interface for software to submit invalidation requests to hardware and to synchronize invalidation completions with hardware.</p></blockquote><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><blockquote><p>The queued invalidation interface uses IQ(Invalidation Queue), which is a circular buffer in system memory. Software submits commands by writing Invalidation Descriptors to the IQ. </p></blockquote><p><a href="https://github.com/projectacrn/acrn-hypervisor/blob/release_2.0/hypervisor/arch/x86/vtd.c#L546" target="_blank" rel="noopener">dmar_issue_qi_request</a>是研究Queued Invalidation的入口函数。</p><p>从源码中可以看到，acrn在invalid dmar context cache, invalid dmar iotlb, invalid dmar interrupt entry cache时，会使用到Queued Invalidation。</p><p>acrn向QI中submit 一个Invalidation Descriptor时，紧接着会submit Invalidation Wait Descriptor(VT-d spec 6.5.2.8)。</p><p><img src="/images/2020/05/6.PNG" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">invalidate_desc_ptr-&gt;hi_64 = hva2hpa(&amp;qi_status);</span><br><span class="line">invalidate_desc_ptr-&gt;lo_64 = DMAR_INV_WAIT_DESC_LOWER;</span><br><span class="line">dmar_unit-&gt;qi_tail = (dmar_unit-&gt;qi_tail + DMAR_QI_INV_ENTRY_SIZE) % DMAR_INVALIDATION_QUEUE_SIZE;</span><br><span class="line"></span><br><span class="line">qi_status = DMAR_INV_STATUS_INCOMPLETE;</span><br><span class="line">iommu_write32(dmar_unit, DMAR_IQT_REG, dmar_unit-&gt;qi_tail);</span><br><span class="line"></span><br><span class="line">start = rdtsc();</span><br><span class="line"><span class="keyword">while</span> (qi_status != DMAR_INV_STATUS_COMPLETED) &#123;</span><br><span class="line"><span class="keyword">if</span> ((rdtsc() - start) &gt; CYCLES_PER_MS) &#123;</span><br><span class="line">pr_err(<span class="string">"DMAR OP Timeout! @ %s"</span>, __func__);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">asm_pause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>&amp;qi_status</code>写入Addr,将<code>DMAR_INV_STATUS_COMPLETED</code>写入Status Data(见上图)，这意味着：当硬件处理完invalidation requests 时，会将<code>qi_status</code>的值赋值为<code>DMAR_INV_STATUS_COMPLETED</code>。</p><p>软件先将<code>qi_status</code>赋值为<code>DMAR_INV_STATUS_INCOMPLETE</code>，然后loop，直至硬件将<code>qi_status</code>的值赋值为<code>DMAR_INV_STATUS_COMPLETED</code>。</p><h2 id="details"><a href="#details" class="headerlink" title="details"></a>details</h2><p>Since information from the context-cache may be used to tag entries in the PASID-cache, IOTLB and paging-structure caches, software must always follow a context-cache invalidation with a PASID cache invalidation (if context-cache entry supports requests-with-PASID, or if Scalable Mode Translation is enabled), followed by an IOTLB invalidation. </p><p>context-cache invalidation and IOTLB invalidation has dependency relationship.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍VT-d中Queued Invalidation的相关知识点。&lt;br&gt;
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="VT-d" scheme="http://liujunming.github.io/tags/VT-d/"/>
    
      <category term="acrn" scheme="http://liujunming.github.io/tags/acrn/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to ept misconfig</title>
    <link href="http://liujunming.github.io/2020/07/12/Introduction-to-ept-misconfig/"/>
    <id>http://liujunming.github.io/2020/07/12/Introduction-to-ept-misconfig/</id>
    <published>2020-07-12T09:01:48.000Z</published>
    <updated>2020-08-30T01:17:15.245Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录ept misconfig的相关笔记。内容主要转载自<a href="http://happyseeker.github.io/kernel/2018/05/29/ept-misconfig.html" target="_blank" rel="noopener">EPT misconfig</a>。<br><a id="more"></a></p><h3 id="EPT-Voilation"><a href="#EPT-Voilation" class="headerlink" title="EPT Voilation"></a>EPT Voilation</h3><p>相当于EPT(扩展页表)的page fault，是一种特殊的硬件异常。当EPT中不存在指定GPA-&gt;HPA的映射时触发，硬件触发。</p><h3 id="EPT-misconfig"><a href="#EPT-misconfig" class="headerlink" title="EPT misconfig"></a>EPT misconfig</h3><p>本质上也是一种page fault，与EPT voilation不同(当page not present时触发)，EPT misconfig类似于 reserved bit set page fault，也就是说当页表项中的保留位设置时触发，也是硬件触发。</p><p>SDM中关于EPT misconfig的描述：</p><blockquote><p>An EPT misconfiguration occurs when, in the course of translating a guest-physical address, the logical processor encounters an EPT paging-structure entry that contains an unsupported value. An EPT violation occurs when there is no EPT misconfiguration but the EPT paging-structure entries disallow an access using the guest physical address.</p></blockquote><h3 id="EPT-misconfig用途"><a href="#EPT-misconfig用途" class="headerlink" title="EPT misconfig用途"></a>EPT misconfig用途</h3><p>EPT misconfig可以用来处理没有passed-through给Guest的mmio区域。</p><p>当首次访问某mmio page时，会触发EPT violation，KVM在EPT violation的处理过程中设置相应EPT entry中的保留位，然后在下一次再访问该page时，即会触发EPT misconfig。</p><p>详细步骤如下：</p><ol><li>QEMU declares a memory region(but not allocate ram or commit it to kvm)</li><li>Guest first access the MMIO address, cause a EPT violation VM-exit</li><li>KVM construct the EPT page table and marks the page table entry with special mark(110b)</li><li>Later the guest access these MMIO, it will be processed by EPT misconfig VM-exit handler</li></ol><hr><p>参考资料：</p><ol><li><a href="http://happyseeker.github.io/kernel/2018/05/29/ept-misconfig.html" target="_blank" rel="noopener">EPT misconfig</a></li><li><a href="https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2018/09/03/kvm-mmio" target="_blank" rel="noopener">KVM MMIO implementation</a></li><li><a href="http://ningfxkvm.blogspot.com/2015/11/kvmept-exception.html" target="_blank" rel="noopener">KVM中的EPT Exception</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录ept misconfig的相关笔记。内容主要转载自&lt;a href=&quot;http://happyseeker.github.io/kernel/2018/05/29/ept-misconfig.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EPT misconfig&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第17期</title>
    <link href="http://liujunming.github.io/2020/07/12/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC17%E6%9C%9F/"/>
    <id>http://liujunming.github.io/2020/07/12/每周分享第17期/</id>
    <published>2020-07-12T05:47:40.000Z</published>
    <updated>2020-08-30T01:17:15.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RPM包"><a href="#RPM包" class="headerlink" title="RPM包"></a>RPM包</h3><p>RPM(Redhat Linux Packet Manager)是Red Hat公司随Redhat Linux推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装。</p><p><a href="https://blog.csdn.net/cuiyifang/article/details/7850703" target="_blank" rel="noopener">https://blog.csdn.net/cuiyifang/article/details/7850703</a><br><a href="https://zhuanlan.zhihu.com/p/27608663" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27608663</a></p><a id="more"></a><h3 id="bochs-vs-qemu"><a href="#bochs-vs-qemu" class="headerlink" title="bochs vs qemu"></a>bochs vs qemu</h3><p>Like bochs, QEMU emulates an x86 CPU. But QEMU is much faster than bochs as it uses dynamic compilation. Bochs is closely tied to x86 PC emulation while QEMU can emulate several processors. Like Valgrind, QEMU does user space emulation and dynamic translation.</p><p><a href="http://people.redhat.com/pbonzini/qemu-test-doc/_build/html/topics/QEMU-compared-to-other-emulators.html" target="_blank" rel="noopener">http://people.redhat.com/pbonzini/qemu-test-doc/_build/html/topics/QEMU-compared-to-other-emulators.html</a></p><h3 id="PCI-PCI-Express-Configuration-Space-Access"><a href="#PCI-PCI-Express-Configuration-Space-Access" class="headerlink" title="PCI/PCI Express Configuration Space Access"></a>PCI/PCI Express Configuration Space Access</h3><blockquote><p>Accesses made using either access mechanism are equivalent. The PCI Express Extended Configuration Space can only be accessed by using the ECAM.</p></blockquote><p>On x86 and x64 platforms, the address of each memory area is determined by the ACPI ‘MCFG’ table. </p><p><a href="http://developer.amd.com/wordpress/media/2012/10/pci%20-%20pci%20express%20configuration%20space%20access.pdf" target="_blank" rel="noopener">PCI/PCI Express Configuration Space Access</a><br><a href="https://stackoverflow.com/questions/57457283/how-to-access-pcie-configuration-space-ecam" target="_blank" rel="noopener">How to access PCIe configuration space</a></p><h3 id="何小龙"><a href="#何小龙" class="headerlink" title="何小龙"></a>何小龙</h3><p><a href="https://blog.csdn.net/hexiaolong2009" target="_blank" rel="noopener">https://blog.csdn.net/hexiaolong2009</a><br>有gpu相关的资料。</p><h3 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h3><p>chroot，即 change root directory (更改 root 目录)。在 linux 系统中，系统默认的目录结构都是以 /，即以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为 / 位置。</p><p><a href="https://www.cnblogs.com/sparkdev/p/8556075.html" target="_blank" rel="noopener">https://www.cnblogs.com/sparkdev/p/8556075.html</a></p><h3 id="nomodeset，quiet和splash内核参数是什么意思？"><a href="#nomodeset，quiet和splash内核参数是什么意思？" class="headerlink" title="nomodeset，quiet和splash内核参数是什么意思？"></a>nomodeset，quiet和splash内核参数是什么意思？</h3><ul><li><p>nomodeset</p><blockquote><p>The newest kernels have moved the video mode setting into the kernel. So all the programming of the hardware specific clock rates and registers on the video card happen in the kernel rather than in the X driver when the X server starts.. This makes it possible to have high resolution nice looking splash (boot) screens and flicker free transitions from boot splash to login screen. Unfortunately, on some cards this doesn’t work properly and you end up with a black screen. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded.</p></blockquote></li><li><p>quiet splash</p><blockquote><p>The splash (which eventually ends up in your /boot/grub/grub.cfg ) causes the splash screen to be shown.<br>At the same time you want the boot process to be quiet, as otherwise all kinds of messages would disrupt that splash screen.</p></blockquote></li></ul><p><a href="https://askubuntu.com/questions/716957/what-do-the-nomodeset-quiet-and-splash-kernel-parameters-mean" target="_blank" rel="noopener">What do the nomodeset, quiet and splash kernel parameters mean?</a></p><h3 id="GRUB-CMDLINE-LINUX-vs-GRUB-CMDLINE-LINUX-DEFAULT"><a href="#GRUB-CMDLINE-LINUX-vs-GRUB-CMDLINE-LINUX-DEFAULT" class="headerlink" title="GRUB_CMDLINE_LINUX vs GRUB_CMDLINE_LINUX_DEFAULT"></a>GRUB_CMDLINE_LINUX vs GRUB_CMDLINE_LINUX_DEFAULT</h3><ul><li>Options in <code>GRUB_CMDLINE_LINUX</code> are <strong>always effective</strong>.</li><li>Options in <code>GRUB_CMDLINE_LINUX_DEFAULT</code> are <strong>effective ONLY during normal boot</strong> (NOT during recovery mode).</li></ul><p><a href="https://askubuntu.com/questions/575651/what-is-the-difference-between-grub-cmdline-linux-and-grub-cmdline-linux-default" target="_blank" rel="noopener">What is the difference between GRUB_CMDLINE_LINUX and GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub</a></p><h3 id="Intro-to-Time-Sensitive-Networking-and-Intel®-Time-Coordinated-Computing-Intel®-TCC"><a href="#Intro-to-Time-Sensitive-Networking-and-Intel®-Time-Coordinated-Computing-Intel®-TCC" class="headerlink" title="Intro to Time-Sensitive Networking and Intel® Time Coordinated Computing (Intel® TCC)"></a>Intro to Time-Sensitive Networking and Intel® Time Coordinated Computing (Intel® TCC)</h3><p>TCC makes sure each device executes its operations exactly when it supposed to.<br><a href="https://www.intel.com/content/www/us/en/now/inside-iot/concept-of-time-video.html" target="_blank" rel="noopener">https://www.intel.com/content/www/us/en/now/inside-iot/concept-of-time-video.html</a></p><h3 id="hurley-x86架构操作系统内核的实现"><a href="#hurley-x86架构操作系统内核的实现" class="headerlink" title="hurley x86架构操作系统内核的实现"></a>hurley x86架构操作系统内核的实现</h3><p><a href="http://wiki.0xffffff.org/" target="_blank" rel="noopener">http://wiki.0xffffff.org/</a><br><a href="https://github.com/hurley25/hurlex-doc/blob/master/doc/hurlex-index.pdf" target="_blank" rel="noopener">https://github.com/hurley25/hurlex-doc/blob/master/doc/hurlex-index.pdf</a></p><h3 id="Lockstep"><a href="#Lockstep" class="headerlink" title="Lockstep"></a>Lockstep</h3><p>Lockstep systems are fault-tolerant computer systems that run the same set of operations at the same time in parallel.<br><a href="https://en.wikipedia.org/wiki/Lockstep_(computing)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Lockstep_(computing)</a></p><h3 id="COLO"><a href="#COLO" class="headerlink" title="COLO"></a>COLO</h3><p>COLO (COarse-grained LOck-stepping)是一种虚拟机的高可用解决方案。当启用的COLO功能后, 主虚拟机(PVM)和备虚拟机(SVM)都会同时处于running 状态。PVM和SVM都可以接收到来自client的网络数据包, 并对数据包做出回应。当PVM和SVM回复的数据包的内容相同, 则PVM回复的数据包会返回给client, 否则会触发checkpoint对PVM和SVM进行同步，然后再将数据包返回给client。当PVM所在的物理机发生宕机时候, SVM可以立即接管, 为client提供服务。</p><p><a href="https://cloud.tencent.com/developer/article/1087097" target="_blank" rel="noopener">kvm虚拟机的FT（容错）方案</a><br><a href="https://wiki.qemu.org/Features/COLO" target="_blank" rel="noopener">Features/COLO</a><br><a href="https://blog.csdn.net/zhongbeida_xue/article/details/70759266" target="_blank" rel="noopener">QEMU COLO (Fault Tolerance) 容错功能总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RPM包&quot;&gt;&lt;a href=&quot;#RPM包&quot; class=&quot;headerlink&quot; title=&quot;RPM包&quot;&gt;&lt;/a&gt;RPM包&lt;/h3&gt;&lt;p&gt;RPM(Redhat Linux Packet Manager)是Red Hat公司随Redhat Linux推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cuiyifang/article/details/7850703&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/cuiyifang/article/details/7850703&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27608663&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/27608663&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="http://liujunming.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="经验" scheme="http://liujunming.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第16期</title>
    <link href="http://liujunming.github.io/2020/07/05/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC16%E6%9C%9F/"/>
    <id>http://liujunming.github.io/2020/07/05/每周分享第16期/</id>
    <published>2020-07-05T04:07:02.000Z</published>
    <updated>2020-08-30T01:17:15.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h3><p>命令行文本增强工具</p><p><a href="https://www.jianshu.com/p/8acfc103fa2f" target="_blank" rel="noopener">https://www.jianshu.com/p/8acfc103fa2f</a></p><a id="more"></a><h3 id="Intel-CPU-security-features"><a href="#Intel-CPU-security-features" class="headerlink" title="Intel CPU security features"></a>Intel CPU security features</h3><p><a href="https://github.com/huku-/research/wiki/Intel-CPU-security-features" target="_blank" rel="noopener">https://github.com/huku-/research/wiki/Intel-CPU-security-features</a></p><h3 id="How-to-use-sed-to-find-and-replace-text-in-files"><a href="#How-to-use-sed-to-find-and-replace-text-in-files" class="headerlink" title="How to use sed to find and replace text in files"></a>How to use sed to find and replace text in files</h3><p><a href="https://www.cyberciti.biz/faq/how-to-use-sed-to-find-and-replace-text-in-files-in-linux-unix-shell/" target="_blank" rel="noopener">https://www.cyberciti.biz/faq/how-to-use-sed-to-find-and-replace-text-in-files-in-linux-unix-shell/</a></p><h3 id="Board-Support-Package"><a href="#Board-Support-Package" class="headerlink" title="Board Support Package"></a>Board Support Package</h3><p>In embedded systems, a board support package (BSP) is the layer of software containing hardware-specific drivers and other routines that allow a particular operating system (traditionally a real-time operating system, or RTOS) to function in a particular hardware environment (a computer or CPU card), integrated with the RTOS itself. Third-party hardware developers who wish to support a particular RTOS must create a BSP that allows that RTOS to run on their platform. In most cases the RTOS image and license, the BSP containing it, and the hardware are bundled together by the hardware vendor.</p><p><a href="https://en.wikipedia.org/wiki/Board_support_package" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Board_support_package</a></p><p><a href="https://www.microcontrollertips.com/board-support-package/" target="_blank" rel="noopener">https://www.microcontrollertips.com/board-support-package/</a></p><h3 id="为什么要清除BSS段"><a href="#为什么要清除BSS段" class="headerlink" title="为什么要清除BSS段"></a>为什么要清除BSS段</h3><p><a href="https://www.cnblogs.com/cainiaoaixuexi/p/3276444.html" target="_blank" rel="noopener">https://www.cnblogs.com/cainiaoaixuexi/p/3276444.html</a></p><h3 id="ELF中的-bss-section和COMMON-section"><a href="#ELF中的-bss-section和COMMON-section" class="headerlink" title="ELF中的.bss section和COMMON section"></a>ELF中的.bss section和COMMON section</h3><p><a href="https://stackoverflow.com/questions/16835716/bss-vs-common-what-goes-where" target="_blank" rel="noopener">https://stackoverflow.com/questions/16835716/bss-vs-common-what-goes-where</a></p><p><a href="http://swaywang.blogspot.com/2012/06/elfbss-sectioncommon-section.html" target="_blank" rel="noopener">http://swaywang.blogspot.com/2012/06/elfbss-sectioncommon-section.html</a></p><h3 id="How-To-Create-View-Extract-Modify-C-Archive-Files"><a href="#How-To-Create-View-Extract-Modify-C-Archive-Files" class="headerlink" title="How To Create, View, Extract, Modify C Archive Files"></a>How To Create, View, Extract, Modify C Archive Files</h3><p><a href="https://www.thegeekstuff.com/2010/08/ar-command-examples/" target="_blank" rel="noopener">https://www.thegeekstuff.com/2010/08/ar-command-examples/</a></p><h3 id="gcc-linker-map-files"><a href="#gcc-linker-map-files" class="headerlink" title="gcc linker map files"></a>gcc linker map files</h3><p><a href="https://blog.csdn.net/szullc/article/details/84946863" target="_blank" rel="noopener">https://blog.csdn.net/szullc/article/details/84946863</a></p><p><a href="https://stackoverflow.com/questions/22199844/what-are-gcc-linker-map-files-used-for" target="_blank" rel="noopener">https://stackoverflow.com/questions/22199844/what-are-gcc-linker-map-files-used-for</a></p><p>Experience: map file比objdump更精确</p><h3 id="nm-命令显示关于指定-File-中符号的信息"><a href="#nm-命令显示关于指定-File-中符号的信息" class="headerlink" title="nm 命令显示关于指定 File 中符号的信息"></a>nm 命令显示关于指定 File 中符号的信息</h3><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/nm.html" target="_blank" rel="noopener">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/nm.html</a></p><h3 id="Alder-Lake"><a href="#Alder-Lake" class="headerlink" title="Alder Lake"></a>Alder Lake</h3><p><a href="https://en.wikichip.org/wiki/intel/microarchitectures/alder_lake" target="_blank" rel="noopener">https://en.wikichip.org/wiki/intel/microarchitectures/alder_lake</a></p><h3 id="Windows-10X"><a href="#Windows-10X" class="headerlink" title="Windows 10X"></a>Windows 10X</h3><p><a href="https://www.youtube.com/watch?v=dIz0WDwBonc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=dIz0WDwBonc</a></p><h3 id="windows-core-os"><a href="#windows-core-os" class="headerlink" title="windows core os"></a>windows core os</h3><p><a href="https://www.windowscentral.com/windows-core-os" target="_blank" rel="noopener">https://www.windowscentral.com/windows-core-os</a></p><h3 id="Intel-Hardware-Accelerated-Execution-Manager-HAXM"><a href="#Intel-Hardware-Accelerated-Execution-Manager-HAXM" class="headerlink" title="Intel Hardware Accelerated Execution Manager (HAXM)"></a>Intel Hardware Accelerated Execution Manager (HAXM)</h3><p>HAXM is a cross-platform hardware-assisted virtualization engine (hypervisor), widely used as an accelerator for <a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android Emulator</a> and <a href="https://www.qemu.org/" target="_blank" rel="noopener">QEMU</a>. It has always supported running on Windows and macOS, and has been ported to other host operating systems as well, such as Linux and NetBSD.</p><p>HAXM runs as a kernel-mode driver on the host operating system, and provides a KVM-like interface to user space, thereby enabling applications like QEMU to utilize the hardware virtualization capabilities built into modern Intel CPUs, namely <a href="https://www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html" target="_blank" rel="noopener">Intel Virtualization Technology</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;fzf&quot;&gt;&lt;a href=&quot;#fzf&quot; class=&quot;headerlink&quot; title=&quot;fzf&quot;&gt;&lt;/a&gt;fzf&lt;/h3&gt;&lt;p&gt;命令行文本增强工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/8acfc103fa2f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/8acfc103fa2f&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="http://liujunming.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="经验" scheme="http://liujunming.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第15期</title>
    <link href="http://liujunming.github.io/2020/06/14/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC15%E6%9C%9F/"/>
    <id>http://liujunming.github.io/2020/06/14/每周分享第15期/</id>
    <published>2020-06-14T06:35:42.000Z</published>
    <updated>2020-08-30T01:17:15.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Burn-the-Clear-Linux-to-the-USB-driver"><a href="#Burn-the-Clear-Linux-to-the-USB-driver" class="headerlink" title="Burn the Clear Linux to the USB driver"></a>Burn the Clear Linux to the USB driver</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdaX</span><br><span class="line"></span><br><span class="line">dd if=clear-2xxxx-installer.img of=/dev/sdb bs=4M status=progress</span><br><span class="line">sync</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="ACRN-腾讯云大学"><a href="#ACRN-腾讯云大学" class="headerlink" title="ACRN  腾讯云大学"></a>ACRN  腾讯云大学</h3><p><a href="https://cloud.tencent.com/edu/learning/course-2675-51869" target="_blank" rel="noopener">https://cloud.tencent.com/edu/learning/course-2675-51869</a></p><h3 id="gitmemory"><a href="#gitmemory" class="headerlink" title="gitmemory"></a>gitmemory</h3><p><a href="https://www.gitmemory.com/liujunming" target="_blank" rel="noopener">https://www.gitmemory.com/liujunming</a></p><h3 id="通过表情符号为您的电子邮件增添风格"><a href="#通过表情符号为您的电子邮件增添风格" class="headerlink" title="通过表情符号为您的电子邮件增添风格"></a>通过表情符号为您的电子邮件增添风格</h3><p><a href="https://support.microsoft.com/zh-cn/office/%e9%80%9a%e8%bf%87%e8%a1%a8%e6%83%85%e7%ac%a6%e5%8f%b7%e4%b8%ba%e6%82%a8%e7%9a%84%e7%94%b5%e5%ad%90%e9%82%ae%e4%bb%b6%e5%a2%9e%e6%b7%bb%e9%a3%8e%e6%a0%bc-b7ffd919-6749-4f07-a998-c0fa1bc0a4d6?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn" target="_blank" rel="noopener">通过表情符号为您的电子邮件增添风格</a><br>若要访问 Windows 10 表情符号选取器，请按 Windows 键和句点（.） 键。</p><h3 id="DediProg"><a href="#DediProg" class="headerlink" title="DediProg"></a>DediProg</h3><p><a href="https://www.dediprog.com/page/companyinformationch" target="_blank" rel="noopener">https://www.dediprog.com/page/companyinformationch</a><br>烧录器</p><h3 id="pkill-f"><a href="#pkill-f" class="headerlink" title="pkill -f"></a>pkill -f</h3><p><code>pkill -f abc</code> 杀掉进程名包含<code>abc</code>的所有进程。</p><h3 id="基于-Docker-Qemu-快速构建-Linux-内核实验环境"><a href="#基于-Docker-Qemu-快速构建-Linux-内核实验环境" class="headerlink" title="基于 Docker/Qemu 快速构建 Linux 内核实验环境"></a>基于 Docker/Qemu 快速构建 Linux 内核实验环境</h3><p><a href="http://tinylab.org/docker-qemu-linux-lab/" target="_blank" rel="noopener">http://tinylab.org/docker-qemu-linux-lab/</a></p><h3 id="SMRAM"><a href="#SMRAM" class="headerlink" title="SMRAM"></a>SMRAM</h3><p>Short for System Management RAM, SMRAM is a portion of the systems memory used by the processor to store code used with SMM.</p><p><a href="https://www.computerhope.com/jargon/s/smram.htm" target="_blank" rel="noopener">https://www.computerhope.com/jargon/s/smram.htm</a></p><h3 id="System-Management-Mode"><a href="#System-Management-Mode" class="headerlink" title="System Management Mode"></a>System Management Mode</h3><p>System Management Mode is an operating mode of x86 central processor units (CPUs) in which all normal execution, including the operating system, is suspended. An alternate software system which usually resides in the computer’s firmware, or a hardware-assisted debugger, is then executed with high privileges.</p><p>System Management Mode (SMM) is intended to be used for advanced power-management features and other operating-system-independent functions. The chipset is programmed to recognize many types of events and timeouts. When such an event occurs, the chipset asserts the SMI# input pin. At the next instruction boundary, the microprocessor saves its entire state and enters SMM.</p><p>只有SMI才会引起进入SMM，处理器保护现场，切换到SMRAM里的一个独立地址空间执行SMM代码，RSM指令会使系统返回到原来的正常模式。SMM相当于实模式，没有特权级和地址映射，可寻址4GB，可执行所有I/O和可用系统指令。</p><p><a href="https://en.wikipedia.org/wiki/System_Management_Mode" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/System_Management_Mode</a><br><a href="https://www.rdzhijia.com/thread-29-1-1.html" target="_blank" rel="noopener">https://www.rdzhijia.com/thread-29-1-1.html</a><br><a href="https://blog.csdn.net/lightseed/article/details/4627069" target="_blank" rel="noopener">https://blog.csdn.net/lightseed/article/details/4627069</a></p><h3 id="Windows-Imaging-Format"><a href="#Windows-Imaging-Format" class="headerlink" title="Windows Imaging Format"></a>Windows Imaging Format</h3><p>The Windows IMaging Format (WIM) is a file-based disk image format.</p><p>Like other disk image formats, a WIM file contains a set of files and associated filesystem metadata. However, unlike sector-based formats (such as ISO or VHD), WIM is file-based: The fundamental unit of information in a WIM is a file.</p><p><a href="https://en.wikipedia.org/wiki/Windows_Imaging_Format" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Windows_Imaging_Format</a></p><h3 id="CSE-481A"><a href="#CSE-481A" class="headerlink" title="CSE 481A"></a>CSE 481A</h3><p>CSE 481A is a capstone course on operating systems, with an emphasis on virtualization.<br><a href="https://courses.cs.washington.edu/courses/cse481a/18wi/index.html" target="_blank" rel="noopener">https://courses.cs.washington.edu/courses/cse481a/18wi/index.html</a></p><h3 id="Capstone-project"><a href="#Capstone-project" class="headerlink" title="Capstone project"></a>Capstone project</h3><p>Capstone project叫顶点课程<br>顶点课程是美国高校为高年级学生，特别是临近毕业的学生开设的一种综合性课程。<br>顶点课程最显著的两个特点：<br>1）是为学生提供整合已得的知识、技能和态度等的机会<br>2）是为学生进入真实世界做准备，即通过要求学生完成一些应用性的项目，如服务性实习、实习等，为学生提供参与真实世界的机会，让学生把先前所学知识和技能应用于解决实际问题，为学生进入职业领域做准备。</p><h3 id="虚拟化从VirtIO-without-Virt到DPU"><a href="#虚拟化从VirtIO-without-Virt到DPU" class="headerlink" title="虚拟化从VirtIO without Virt到DPU"></a>虚拟化从VirtIO without Virt到DPU</h3><p><a href="https://mp.weixin.qq.com/s/vGOGuh1-8aeEU3QwoKDzcA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vGOGuh1-8aeEU3QwoKDzcA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Burn-the-Clear-Linux-to-the-USB-driver&quot;&gt;&lt;a href=&quot;#Burn-the-Clear-Linux-to-the-USB-driver&quot; class=&quot;headerlink&quot; title=&quot;Burn the Clear Linux to the USB driver&quot;&gt;&lt;/a&gt;Burn the Clear Linux to the USB driver&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;umount /dev/sdaX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd if=clear-2xxxx-installer.img of=/dev/sdb bs=4M status=progress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="经验" scheme="http://liujunming.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="经验" scheme="http://liujunming.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
