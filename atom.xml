<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L</title>
  
  <subtitle>make it simple, make it happen.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujunming.github.io/"/>
  <updated>2021-11-30T16:07:47.394Z</updated>
  <id>http://liujunming.github.io/</id>
  
  <author>
    <name>liujunming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QEMU tutorial:How to use ivshmem-plain</title>
    <link href="http://liujunming.github.io/2021/11/30/QEMU-tutorial-Inter-VM-Shared-Memory-device/"/>
    <id>http://liujunming.github.io/2021/11/30/QEMU-tutorial-Inter-VM-Shared-Memory-device/</id>
    <published>2021-11-30T14:15:12.000Z</published>
    <updated>2021-11-30T16:07:47.394Z</updated>
    
    <content type="html"><![CDATA[<p>QEMU tutorial: How to use ivshmem-plain。<a id="more"></a><br><a href="/2021/11/11/Notes-about-ivshmem/">Notes about ivshmem</a></p><h3 id="1-hotplug-ivshmem-in-QEMU-monitor"><a href="#1-hotplug-ivshmem-in-QEMU-monitor" class="headerlink" title="1. hotplug ivshmem in QEMU monitor"></a>1. hotplug ivshmem in QEMU monitor</h3><p>Use QEMU to launch a VM, enter the <a href="/2020/05/06/QEMU-usage-notes/#built-in-monitor-mode">monitor mode</a>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(qemu) object_add  memory-backend-file,size=16M,share,mem-path=/dev/shm/shm1,id=shm1</span><br><span class="line">(qemu) device_add  ivshmem-plain,memdev=shm1,bus=pci.0,addr=0x10,master=on</span><br><span class="line">(qemu) object_add  memory-backend-file,size=8M,share,mem-path=/dev/shm/shm2,id=shm2</span><br><span class="line">(qemu) device_add  ivshmem-plain,memdev=shm2,bus=pci.0,addr=0x11,master=on</span><br></pre></td></tr></table></figure></p><h3 id="2-write-the-signature-into-shared-memory-in-host"><a href="#2-write-the-signature-into-shared-memory-in-host" class="headerlink" title="2. write the signature into shared memory in host"></a>2. write the signature into shared memory in host</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "SIGN_01" &gt; /dev/shm/shm1</span><br><span class="line">echo "SIGN_02" &gt; /dev/shm/shm2</span><br></pre></td></tr></table></figure><h3 id="3-read-the-signature-from-shared-memory-in-guest"><a href="#3-read-the-signature-from-shared-memory-in-guest" class="headerlink" title="3. read the signature from shared memory in guest"></a>3. read the signature from shared memory in guest</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHM_SIZE (16 * 1024 * 1024)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">"/sys/bus/pci/devices/0000:00:10.0/resource2"</span>, O_RDWR);</span><br><span class="line">    assert(fd != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    p = mmap(<span class="number">0</span>, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    assert(p != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    munmap(p, SHM_SIZE);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gcc t.c</span><br><span class="line"><span class="meta">$</span> ./a.out</span><br><span class="line">SIGN_01</span><br></pre></td></tr></table></figure><hr><p>参考资料:</p><ol><li><a href="https://www.qemu.org/docs/master/system/devices/ivshmem.html" target="_blank" rel="noopener">qemu doc: Inter-VM Shared Memory device</a></li><li><a href="http://just4coding.com/2021/09/12/qemu-ivshmem/" target="_blank" rel="noopener">QEMU虚拟机内识别ivshmem设备</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QEMU tutorial: How to use ivshmem-plain。
    
    </summary>
    
      <category term="QEMU" scheme="http://liujunming.github.io/categories/QEMU/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="QEMU" scheme="http://liujunming.github.io/tags/QEMU/"/>
    
  </entry>
  
  <entry>
    <title>How to use GDB to debug QEMU process</title>
    <link href="http://liujunming.github.io/2021/11/30/How-to-use-GDB-to-debug-QEMU/"/>
    <id>http://liujunming.github.io/2021/11/30/How-to-use-GDB-to-debug-QEMU/</id>
    <published>2021-11-30T07:37:29.000Z</published>
    <updated>2021-11-30T12:45:49.054Z</updated>
    
    <content type="html"><![CDATA[<p>How to use GDB to debug QEMU process?<a id="more"></a></p><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-debug</span><br></pre></td></tr></table></figure><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> which qemu-system-x86_64</span><br><span class="line">/usr/local/bin/qemu-system-x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gdb --args /usr/local/bin/qemu-system-x86_64\</span><br><span class="line">    -enable-kvm \</span><br><span class="line">    -m 2048 \</span><br><span class="line">    -smp 2 \</span><br><span class="line">    -cpu host \</span><br><span class="line">    -drive format=raw,file=laag.img \</span><br><span class="line">    -serial mon:stdio \</span><br><span class="line">    -net nic,macaddr=00:16:3e:60:0a:50 \</span><br><span class="line">    -net tap \</span><br><span class="line">    -vnc :3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b x86_cpu_get_supported_feature_word</span><br><span class="line">Breakpoint 1 at 0x44f372: file /home/kvm/qemu/target/i386/cpu.c, line 5050.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /usr/local/bin/qemu-system-x86_64 -enable-kvm -m 2048 -smp 2 -cpu host -drive format=raw,file=laag.img -serial mon:stdio -net nic,macaddr=00:16:3e:60:0a:50 -net tap -vnc :3</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".</span><br><span class="line">[New Thread 0x7fffe8d59700 (LWP 15519)]</span><br><span class="line">++ brctl show</span><br><span class="line">++ sed -n 2p</span><br><span class="line">++ awk '&#123;print $1&#125;'</span><br><span class="line">+ switch=br0</span><br><span class="line">+ '[' -n br0 ']'</span><br><span class="line">++ whoami</span><br><span class="line">+ tunctl -u root -t tap0</span><br><span class="line">TUNSETIFF: Device or resource busy</span><br><span class="line">+ ip link set tap0 up</span><br><span class="line">+ brctl addif br0 tap0</span><br><span class="line">+ exit 0</span><br><span class="line"></span><br><span class="line">Thread 1 "qemu-system-x86" hit Breakpoint 1, x86_cpu_get_supported_feature_word (w=FEAT_1_EDX, migratable_only=true) at /home/kvm/qemu/target/i386/cpu.c:5050</span><br><span class="line">5050        FeatureWordInfo *wi = &amp;feature_word_info[w];</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="meta">#</span>0  0x00005555559a3372 in x86_cpu_get_supported_feature_word (w=FEAT_1_EDX, migratable_only=true) at /home/kvm/qemu/target/i386/cpu.c:5050</span><br><span class="line"><span class="meta">#</span>1  0x00005555559a67bf in x86_cpu_expand_features (cpu=0x555556acef90, errp=0x7fffffffda60) at /home/kvm/qemu/target/i386/cpu.c:6386</span><br><span class="line"><span class="meta">#</span>2  0x00005555559a70a3 in x86_cpu_realizefn (dev=0x555556acef90, errp=0x7fffffffdae0) at /home/kvm/qemu/target/i386/cpu.c:6574</span><br><span class="line"><span class="meta">#</span>3  0x0000555555aa54cf in device_set_realized (obj=0x555556acef90, value=true, errp=0x7fffffffdbe8) at /home/kvm/qemu/hw/core/qdev.c:864</span><br><span class="line"><span class="meta">#</span>4  0x0000555555cf4adf in property_set_bool (obj=0x555556acef90, v=0x555556aecae0, name=0x555555fb5771 "realized", opaque=0x5555568916e0, errp=0x7fffffffdbe8) at /home/kvm/qemu/qom/object.c:2202</span><br><span class="line"><span class="meta">#</span>5  0x0000555555cf2c00 in object_property_set (obj=0x555556acef90, name=0x555555fb5771 "realized", v=0x555556aecae0, errp=0x55555681c0a0 &lt;error_fatal&gt;) at /home/kvm/qemu/qom/object.c:1349</span><br><span class="line"><span class="meta">#</span>6  0x0000555555cf5f45 in object_property_set_qobject (obj=0x555556acef90, name=0x555555fb5771 "realized", value=0x555556aea3a0, errp=0x55555681c0a0 &lt;error_fatal&gt;) at /home/kvm/qemu/qom/qom-qobject.c:28</span><br><span class="line"><span class="meta">#</span>7  0x0000555555cf2f47 in object_property_set_bool (obj=0x555556acef90, name=0x555555fb5771 "realized", value=true, errp=0x55555681c0a0 &lt;error_fatal&gt;) at /home/kvm/qemu/qom/object.c:1416</span><br><span class="line"><span class="meta">#</span>8  0x0000555555aa4083 in qdev_realize (dev=0x555556acef90, bus=0x0, errp=0x55555681c0a0 &lt;error_fatal&gt;) at /home/kvm/qemu/hw/core/qdev.c:379</span><br><span class="line"><span class="meta">#</span>9  0x000055555594235d in x86_cpu_new (x86ms=0x555556a43800, apic_id=0, errp=0x55555681c0a0 &lt;error_fatal&gt;) at /home/kvm/qemu/hw/i386/x86.c:126</span><br><span class="line"><span class="meta">#</span>10 0x00005555559424e8 in x86_cpus_init (x86ms=0x555556a43800, default_cpu_version=1) at /home/kvm/qemu/hw/i386/x86.c:164</span><br><span class="line"><span class="meta">#</span>11 0x000055555594ac74 in pc_init1 (machine=0x555556a43800, host_type=0x555555f73516 "i440FX-pcihost", pci_type=0x555555f7350f "i440FX") at /home/kvm/qemu/hw/i386/pc_piix.c:159</span><br><span class="line"><span class="meta">#</span>12 0x000055555594b791 in pc_init_v5_1 (machine=0x555556a43800) at /home/kvm/qemu/hw/i386/pc_piix.c:438</span><br><span class="line"><span class="meta">#</span>13 0x0000555555ab385c in machine_run_board_init (machine=0x555556a43800) at /home/kvm/qemu/hw/core/machine.c:1135</span><br><span class="line"><span class="meta">#</span>14 0x000055555599b752 in qemu_init (argc=18, argv=0x7fffffffe238, envp=0x7fffffffe2d0) at /home/kvm/qemu/softmmu/vl.c:4355</span><br><span class="line"><span class="meta">#</span>15 0x0000555555ddeb86 in main (argc=18, argv=0x7fffffffe238, envp=0x7fffffffe2d0) at /home/kvm/qemu/softmmu/main.c:48</span><br></pre></td></tr></table></figure><hr><p>参考资料:</p><ol><li><a href="https://kernelgo.org/linux-tips.html" target="_blank" rel="noopener"> Debug Qemu代码</a></li><li><a href="https://ctf-wiki.github.io/ctf-tools/binary-core-tools/virtualization/qemu/qemu-install-and-debug/" target="_blank" rel="noopener">qemu 安装与调试</a></li><li><a href="https://www.cnblogs.com/ck1020/p/7795242.html" target="_blank" rel="noopener">GDB调试qemu源码纪录</a></li><li><a href="https://blog.csdn.net/wujianyongw4/article/details/85701740" target="_blank" rel="noopener">gdb 调试qemu</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How to use GDB to debug QEMU process?
    
    </summary>
    
      <category term="debug" scheme="http://liujunming.github.io/categories/debug/"/>
    
    
      <category term="QEMU" scheme="http://liujunming.github.io/tags/QEMU/"/>
    
      <category term="debug" scheme="http://liujunming.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>How to enable QEMU  to use public bridge</title>
    <link href="http://liujunming.github.io/2021/11/29/How-to-enable-QEMU-guests-to-use-public-bridge/"/>
    <id>http://liujunming.github.io/2021/11/29/How-to-enable-QEMU-guests-to-use-public-bridge/</id>
    <published>2021-11-29T06:32:27.000Z</published>
    <updated>2021-11-30T12:45:49.054Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍enable QEMU  to use public bridge。<a id="more"></a></p><h3 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h3><p><strong>Bridge</strong>类似于一个网络交换机，用于交换数据包，连接不同的VMs, containers以及Host.<br><img src="/images/2021/11/13.png" alt></p><h3 id="2-Tun-Tap网卡"><a href="#2-Tun-Tap网卡" class="headerlink" title="2. Tun/Tap网卡"></a>2. Tun/Tap网卡</h3><p>在我们创建完虚拟机后，一般在host里会多了张tap网卡，那这个网卡有什么作用呢？</p><h4 id="2-1-普通网卡工作模式"><a href="#2-1-普通网卡工作模式" class="headerlink" title="2.1 普通网卡工作模式"></a>2.1 普通网卡工作模式</h4><p><img src="/images/2021/11/14.png" alt><br>普通的网卡一端连接物理链路，一端连接内核协议栈。</p><h4 id="2-2-tun-tap网卡工作模式"><a href="#2-2-tun-tap网卡工作模式" class="headerlink" title="2.2 tun/tap网卡工作模式"></a>2.2 tun/tap网卡工作模式</h4><p>普通的物理网卡是通过物理链路来收发数据，而tun/tap 是通过/dev/net/tun来收发数据。tun/tap网卡一端连着/dev/net/tun，一端连着协议栈。</p><h4 id="2-3-虚拟化场景下的tap网卡"><a href="#2-3-虚拟化场景下的tap网卡" class="headerlink" title="2.3 虚拟化场景下的tap网卡"></a>2.3 虚拟化场景下的tap网卡</h4><p>虚拟机主要用的是tap类型网卡，下面是tap网卡工作模式：<br><img src="/images/2021/11/15.png" alt></p><p>tap网卡主要是两部分组成，字符设备驱动和虚拟网卡驱动。</p><ul><li>字符设备驱动：负责和用户进程打交道，把数据写入/dev/net/tun，然后通知用户进程从/dev/net/tun里面拿数据实现数据交互</li><li>虚拟网卡驱动：负责和网络协议栈的数据打交道</li></ul><p>qemu-kvm中 vm与host之间的通讯过程:</p><ol><li>在创建一个vm并启动时，在host中创建一个tap类型的网卡，例如tap0，同时vm作为一个qemu进程，内核为其提供了一个/dev/net/tun设备的文件描述符(fd),供其读写</li><li>vm用户进程产生数据，发到vm的虚拟网卡上，实质上vm作为host的一个qemu进程，其产生的数据写入到/dev/net/tun里</li><li>tap0网卡通过字符设备驱动从/dev/net/tun 里收到数据后，会转发给网桥，网桥再判断是否丢弃，转发或者交给上层的API来处理</li></ol><h3 id="3-Solutions"><a href="#3-Solutions" class="headerlink" title="3. Solutions"></a>3. Solutions</h3><h4 id="3-1-Create-bridge"><a href="#3-1-Create-bridge" class="headerlink" title="3.1 Create bridge"></a>3.1 Create bridge</h4><h5 id="3-1-1-Using-Distribution-Specific-Scripts"><a href="#3-1-1-Using-Distribution-Specific-Scripts" class="headerlink" title="3.1.1 Using Distribution-Specific Scripts"></a>3.1.1 Using Distribution-Specific Scripts</h5><p><a href="https://www.linux-kvm.org/page/Networking#Public_Bridge" target="_blank" rel="noopener">Networking#Public_Bridge</a>中列举了RedHat，Debian和SuSE上的配置。<br>还有一个重要的tool是<a href="/2021/06/01/Introduction-to-netplan/">netplan</a>。</p><p>主机重启后，无需重新配置，重点推荐😊。</p><h5 id="3-1-2-Manual-Configuration"><a href="#3-1-2-Manual-Configuration" class="headerlink" title="3.1.2 Manual Configuration"></a>3.1.2 Manual Configuration</h5><p>参见<a href="https://www.cnblogs.com/haiyonghao/p/14440163.html" target="_blank" rel="noopener">QEMU使用网桥模式</a>和<a href="https://blog.stefan-koch.name/2020/10/25/qemu-public-ip-vm-with-tap" target="_blank" rel="noopener">Hosting QEMU VMs with Public IP Addresses using TAP Interfaces</a>中的步骤。</p><p>此方法的弊端在于:每次主机重启都需要重新配置，所以不推荐😢。</p><h4 id="3-2-Create-tap"><a href="#3-2-Create-tap" class="headerlink" title="3.2 Create tap"></a>3.2 Create tap</h4><p>The default network configure script is <code>/etc/qemu-ifup</code> and the default network deconfigure script is <code>/etc/qemu-ifdown</code>.</p><p>将创建tap的脚本放入到<code>/etc/qemu-ifup</code>中即可。</p><h3 id="4-Experience"><a href="#4-Experience" class="headerlink" title="4. Experience"></a>4. Experience</h3><h4 id="4-1-netplan-and-qemu-ifup"><a href="#4-1-netplan-and-qemu-ifup" class="headerlink" title="4.1 netplan and qemu-ifup"></a>4.1 netplan and qemu-ifup</h4><p><a href="https://github.com/liujunming/qemu_usage/tree/master/0002-set-net-on-kvm" target="_blank" rel="noopener">https://github.com/liujunming/qemu_usage/tree/master/0002-set-net-on-kvm</a></p><h4 id="4-2-virtio-net-pci"><a href="#4-2-virtio-net-pci" class="headerlink" title="4.2 virtio-net-pci"></a>4.2 virtio-net-pci</h4><p><a href="https://github.com/liujunming/qemu_usage/tree/master/0007-use-virtio-net-pci-dev" target="_blank" rel="noopener">https://github.com/liujunming/qemu_usage/tree/master/0007-use-virtio-net-pci-dev</a></p><h4 id="4-3-e1000-device"><a href="#4-3-e1000-device" class="headerlink" title="4.3 e1000 device"></a>4.3 e1000 device</h4><p><a href="https://github.com/liujunming/qemu_usage/tree/master/0009-e1000-device" target="_blank" rel="noopener">https://github.com/liujunming/qemu_usage/tree/master/0009-e1000-device</a></p><h4 id="4-4-net-nic"><a href="#4-4-net-nic" class="headerlink" title="4.4 net nic"></a>4.4 net nic</h4><p><a href="https://github.com/liujunming/qemu_usage/tree/master/0010-net-nic" target="_blank" rel="noopener">https://github.com/liujunming/qemu_usage/tree/master/0010-net-nic</a></p><h3 id="5-Troubleshooting"><a href="#5-Troubleshooting" class="headerlink" title="5. Troubleshooting"></a>5. Troubleshooting</h3><p><strong>docker makes existing KVM VMs have suddenly no connection</strong></p><p>Potential solutions:</p><ul><li><p><a href="https://github.com/docker/for-linux/issues/949#issuecomment-594528885" target="_blank" rel="noopener">docker-ce package makes existing KVM guests unusable</a></p></li><li><p><a href="https://anteru.net/blog/2017/docker-kvm-iptables/" target="_blank" rel="noopener">Docker, KVM and iptables</a></p></li></ul><hr><p>参考资料:</p><ol><li><a href="https://www.linux-kvm.org/page/Networking#Public_Bridge" target="_blank" rel="noopener">Networking#Public_Bridge</a></li><li><a href="https://www.cnblogs.com/xia-dong/p/11555625.html" target="_blank" rel="noopener">qemu虚拟机网桥通讯过程</a></li><li><a href="https://calinyara.github.io/technology/2019/08/22/vnet_interface.html" target="_blank" rel="noopener">虚拟网络设备简介</a></li><li><a href="https://www.cnblogs.com/haiyonghao/p/14440163.html" target="_blank" rel="noopener">QEMU使用网桥模式</a></li><li><a href="https://blog.stefan-koch.name/2020/10/25/qemu-public-ip-vm-with-tap" target="_blank" rel="noopener">Hosting QEMU VMs with Public IP Addresses using TAP Interfaces</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍enable QEMU  to use public bridge。
    
    </summary>
    
      <category term="工具" scheme="http://liujunming.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="QEMU" scheme="http://liujunming.github.io/tags/QEMU/"/>
    
      <category term="工具" scheme="http://liujunming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CPUID management in QEMU/KVM</title>
    <link href="http://liujunming.github.io/2021/11/28/CPUID-management-in-QEMU-KVM/"/>
    <id>http://liujunming.github.io/2021/11/28/CPUID-management-in-QEMU-KVM/</id>
    <published>2021-11-28T05:23:15.000Z</published>
    <updated>2021-11-28T10:49:16.773Z</updated>
    
    <content type="html"><![CDATA[<p>本文以<a href="https://gitlab.com/qemu-project/qemu/-/tree/v5.2.0" target="_blank" rel="noopener">QEMU V5.2.0</a>,<a href="https://elixir.bootlin.com/linux/v5.14/source" target="_blank" rel="noopener">kernel  v5.14</a>的源码，介绍CPUID management，具体细节不会一一介绍，但是会给出函数调用链，读者可以以此为线索，深挖细节。<a id="more"></a></p><h3 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h3><p>guest执行cpuid指令肯定会导致VM Exit，然后由KVM处理cpuid指令的模拟。</p><p>KVM会执行<a href="https://elixir.bootlin.com/linux/v5.14/source/arch/x86/kvm/cpuid.c#L1225" target="_blank" rel="noopener">kvm_emulate_cpuid</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kvm_emulate_cpuid</span><span class="params">(struct kvm_vcpu *vcpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 eax, ebx, ecx, edx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cpuid_fault_enabled(vcpu) &amp;&amp; !kvm_require_cpl(vcpu, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">eax = kvm_rax_read(vcpu); <span class="comment">// 读取vcpu的rax内容</span></span><br><span class="line">ecx = kvm_rcx_read(vcpu); <span class="comment">// 读取vcpu的rcx内容</span></span><br><span class="line">kvm_cpuid(vcpu, &amp;eax, &amp;ebx, &amp;ecx, &amp;edx, <span class="literal">true</span>);</span><br><span class="line">kvm_rax_write(vcpu, eax);</span><br><span class="line">kvm_rbx_write(vcpu, ebx);</span><br><span class="line">kvm_rcx_write(vcpu, ecx);</span><br><span class="line">kvm_rdx_write(vcpu, edx);</span><br><span class="line"><span class="keyword">return</span> kvm_skip_emulated_instruction(vcpu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">kvm_cpuid</span><span class="params">(struct kvm_vcpu *vcpu, u32 *eax, u32 *ebx,</span></span></span><br><span class="line"><span class="function"><span class="params">       u32 *ecx, u32 *edx, <span class="keyword">bool</span> check_limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 function = *eax, index = *ecx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kvm_cpuid_entry2</span> *<span class="title">best</span>;</span></span><br><span class="line"><span class="keyword">bool</span> entry_found = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">best = kvm_find_cpuid_entry(vcpu, function, index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!best) &#123;</span><br><span class="line">entry_found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!check_limit)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">best = check_cpuid_limit(vcpu, function, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="keyword">if</span> (best) &#123;</span><br><span class="line">*eax = best-&gt;eax;</span><br><span class="line">*ebx = best-&gt;ebx;</span><br><span class="line">*ecx = best-&gt;ecx;</span><br><span class="line">*edx = best-&gt;edx;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">*eax = *ebx = *ecx = *edx = <span class="number">0</span>;</span><br><span class="line">trace_kvm_cpuid(function, *eax, *ebx, *ecx, *edx, entry_found);</span><br><span class="line"><span class="keyword">return</span> entry_found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较重要的函数为<a href="https://elixir.bootlin.com/linux/v5.14/source/arch/x86/kvm/cpuid.c#L1100" target="_blank" rel="noopener">kvm_find_cpuid_entry</a>,该函数寻找qemu写入到KVM中的CPUID entry(具体细节请参考源码)。</p><p>所以比较重要的是这个”entry”,该entry由qemu写入。</p><p>大致过程为:</p><ol><li>qemu通过ioctl(KVM_GET_SUPPORTED_CPUID)读取到host支持的CPUID列表</li><li>qemu通过与运算剔除掉qemu(用户通过 -cpu option来指定)不支持的CPUID</li><li>qemu通过ioctl(KVM_SET_CPUID2)将CPUID数据写入到KVM中供guest使用</li></ol><p>说白了，就是qemu与KVM协调创建cpuid “entry”，最终，qemu将该“entry”的值写入KVM。接下来，guest执行cpuid指令而发生VM Exit时，KVM就可以cover住，无需qemu的参与。</p><h3 id="2-Call-chains-in-QEMU"><a href="#2-Call-chains-in-QEMU" class="headerlink" title="2. Call chains in QEMU"></a>2. Call chains in QEMU</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x86_cpu_realizefn</span><br><span class="line">x86_cpu_expand_features</span><br><span class="line">x86_cpu_get_supported_feature_word</span><br><span class="line">kvm_arch_get_supported_cpuid</span><br><span class="line">get_supported_cpuid</span><br><span class="line">try_get_cpuid</span><br><span class="line">KVM_GET_SUPPORTED_CPUID</span><br><span class="line">x86_cpu_filter_features</span><br><span class="line">x86_cpu_get_supported_feature_word</span><br><span class="line">kvm_arch_get_supported_cpuid</span><br><span class="line">get_supported_cpuid</span><br><span class="line">try_get_cpuid</span><br><span class="line">KVM_GET_SUPPORTED_CPUID</span><br><span class="line">qemu_init_vcpu</span><br><span class="line">cpus_accel-&gt;create_vcpu_thread[kvm_start_vcpu_thread]</span><br><span class="line">kvm_vcpu_thread_fn</span><br><span class="line">kvm_init_vcpu</span><br><span class="line">kvm_arch_init_vcpu</span><br><span class="line">cpu_x86_cpuid</span><br><span class="line">KVM_SET_CPUID2</span><br></pre></td></tr></table></figure><p><code>KVM_GET_SUPPORTED_CPUID</code>和<code>KVM_SET_CPUID2</code>的更多描述，可以参考<a href="https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt" target="_blank" rel="noopener">kvm/api.txt</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** Steps involved on loading and filtering CPUID data</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When initializing and realizing a CPU object, the steps</span></span><br><span class="line"><span class="comment"> * involved in setting up CPUID data are:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1) Loading CPU model definition (X86CPUDefinition). This is</span></span><br><span class="line"><span class="comment"> *    implemented by x86_cpu_load_model() and should be completely</span></span><br><span class="line"><span class="comment"> *    transparent, as it is done automatically by instance_init.</span></span><br><span class="line"><span class="comment"> *    No code should need to look at X86CPUDefinition structs</span></span><br><span class="line"><span class="comment"> *    outside instance_init.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2) CPU expansion. This is done by realize before CPUID</span></span><br><span class="line"><span class="comment"> *    filtering, and will make sure host/accelerator data is</span></span><br><span class="line"><span class="comment"> *    loaded for CPU models that depend on host capabilities</span></span><br><span class="line"><span class="comment"> *    (e.g. "host"). Done by x86_cpu_expand_features().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3) CPUID filtering. This initializes extra data related to</span></span><br><span class="line"><span class="comment"> *    CPUID, and checks if the host supports all capabilities</span></span><br><span class="line"><span class="comment"> *    required by the CPU. Runnability of a CPU model is</span></span><br><span class="line"><span class="comment"> *    determined at this step. Done by x86_cpu_filter_features().</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="3-How-to-use"><a href="#3-How-to-use" class="headerlink" title="3.How to use"></a>3.How to use</h3><p><code>qemu-system-x86_64 -cpu help</code></p><ul><li><p>增加 pdpe1gb feature (其中Nehalem是我选定的CPU型号, 也可以是别的型号)</p><p>  <code>qemu-system-x86_64 -cpu Nehalem,+pdpe1gb</code></p></li><li><p>增加 pdpe1gb feature, 减去sse feature</p><p><code>qemu-system-x86_64 -cpu Nehalem,+pdpe1gb,-sse</code></p></li><li><p>增加x2apic feature</p><p> <code>qemu-system-x86_64 -cpu host,x2apic=on</code></p></li></ul><p>qemu解析cpu feature选项的函数为<a href="https://gitlab.com/qemu-project/qemu/-/blob/v5.2.0/target/i386/cpu.c#L4697" target="_blank" rel="noopener">x86_cpu_parse_featurestr</a>。</p><h3 id="4-MISC"><a href="#4-MISC" class="headerlink" title="4. MISC"></a>4. MISC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Compatibily hack to maintain legacy +-feat semantic,</span></span><br><span class="line"><span class="comment"> * where +-feat overwrites any feature set by</span></span><br><span class="line"><span class="comment"> * feat=on|feat even if the later is parsed after +-feat</span></span><br><span class="line"><span class="comment"> * (i.e. "-x2apic,x2apic=on" will result in x2apic disabled)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> GList *plus_features, *minus_features;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CPUID usage for interaction between Hypervisors and Linux</span></span><br><span class="line"><span class="comment">//https://lore.kernel.org/kvm/1222881242.9381.17.camel@alok-dev1/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CPUID_EXT_HYPERVISOR  (1U &lt;&lt; 31)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This CPUID returns the signature 'KVMKVMKVM' in ebx, ecx, and edx.  It</span></span><br><span class="line"><span class="comment"> * should be used to determine that a VM is running under KVM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KVM_CPUID_SIGNATURE0x40000000</span></span><br></pre></td></tr></table></figure><hr><p>参考资料:</p><ol><li><a href="https://www.cnblogs.com/haiyonghao/p/14440954.html" target="_blank" rel="noopener">READMSR和CPUID指令在Guest中的代码执行路径学习</a></li><li><a href="https://www.cnblogs.com/hugetong/p/7773526.html" target="_blank" rel="noopener">qemu增加减少CPUID</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以&lt;a href=&quot;https://gitlab.com/qemu-project/qemu/-/tree/v5.2.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QEMU V5.2.0&lt;/a&gt;,&lt;a href=&quot;https://elixir.bootlin.com/linux/v5.14/source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kernel  v5.14&lt;/a&gt;的源码，介绍CPUID management，具体细节不会一一介绍，但是会给出函数调用链，读者可以以此为线索，深挖细节。
    
    </summary>
    
      <category term="QEMU" scheme="http://liujunming.github.io/categories/QEMU/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="QEMU" scheme="http://liujunming.github.io/tags/QEMU/"/>
    
      <category term="KVM" scheme="http://liujunming.github.io/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Notes about the usage of Linux kernel modules</title>
    <link href="http://liujunming.github.io/2021/11/26/commands-on-Linux-kernel-modules/"/>
    <id>http://liujunming.github.io/2021/11/26/commands-on-Linux-kernel-modules/</id>
    <published>2021-11-26T02:27:40.000Z</published>
    <updated>2021-11-26T12:03:30.909Z</updated>
    
    <content type="html"><![CDATA[<p>总结下Linux modules的使用笔记。<a id="more"></a></p><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1.  指令"></a>1.  指令</h3><ul><li><code>modinfo</code></li><li><code>modprobe</code></li><li><code>insmod</code></li><li><code>rmmod</code></li><li><code>lsmod</code></li><li><code>depmod</code></li></ul><h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2. 文件"></a>2. 文件</h3><ul><li><code>modprobe.d</code></li><li><code>modules.dep</code></li><li><code>modules-load.d</code></li></ul><h3 id="3-功能"><a href="#3-功能" class="headerlink" title="3. 功能"></a>3. 功能</h3><p>详情请参考<a href="https://wiki.archlinux.org/title/Kernel_module" target="_blank" rel="noopener">archlinux Kernel module</a>。</p><ul><li>Obtaining information</li><li>Automatic module loading with systemd</li><li>Manual module handling</li><li>Setting module options(pass a parameter to a kernel module)<ul><li>Manually at load time using modprobe</li><li>Using files in /etc/modprobe.d/</li><li>Using kernel command line</li></ul></li><li>Blacklisting<ul><li>Using files in /etc/modprobe.d/</li><li>Using kernel command line</li><li><a href="https://documentation.suse.com/sles/12-SP4/html/SLES-all/cha-mod.html" target="_blank" rel="noopener">modprobe.blacklist=<em>MODULE_NAME</em></a></li></ul></li></ul><h3 id="4-tips"><a href="#4-tips" class="headerlink" title="4. tips"></a>4. tips</h3><ul><li><p><code>modprobe</code> uses modules.dep to translate module names into module locations and get dependency relationship.</p></li><li><p><code>depmod</code>generates modules.dep and map files.</p></li><li><code>insmod</code> your module by providing a fully qualified path to the .ko file. <code>insmod</code> doesn’t do any dependency checking.</li></ul><hr><p>参考资料:</p><ol><li><a href="https://wiki.archlinux.org/title/Kernel_module" target="_blank" rel="noopener">archlinux Kernel module</a></li><li><a href="https://lists.kernelnewbies.org/pipermail/kernelnewbies/2011-September/003152.html" target="_blank" rel="noopener">How make modprobe find my kernel module?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结下Linux modules的使用笔记。
    
    </summary>
    
      <category term="工具" scheme="http://liujunming.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Kernel" scheme="http://liujunming.github.io/tags/Kernel/"/>
    
      <category term="工具" scheme="http://liujunming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Compiling kernel module only w/o whole kernel compilation</title>
    <link href="http://liujunming.github.io/2021/11/26/Compiling-kernel-module-only-w-o-whole-kernel-compilation/"/>
    <id>http://liujunming.github.io/2021/11/26/Compiling-kernel-module-only-w-o-whole-kernel-compilation/</id>
    <published>2021-11-26T02:07:04.000Z</published>
    <updated>2021-11-26T12:03:30.908Z</updated>
    
    <content type="html"><![CDATA[<p>如何只编译内核的单个模块，然后reload新的模块呢？本文以kvm kernel module为例，阐述下具体的过程。本文转载自: <a href="https://yulistic.gitlab.io/2017/10/compiling-kernel-module-only-w/o-whole-kernel-compilation/" target="_blank" rel="noopener">Compiling kernel module only w/o whole kernel compilation</a><a id="more"></a></p><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>I was tried to modify a <code>kvm</code> kernel module for my research. Because it was a built-in kernel module, I needed to build all the kernel source code after modifying <code>kvm</code> module which is located in path <code>arch/x86/kvm/</code> from the linux kernel source root.</p><p>The whole kernel compilation was a time consuming job, usually taking over 10 minutes even on my i7 desktop machine. I tried to find a way to compile modules only without the whole kernel compilation. The solution and some troublesomes are described below.</p><h3 id="2-Assumption"><a href="#2-Assumption" class="headerlink" title="2. Assumption"></a>2. Assumption</h3><p>It is assumed that you have a kernel source code and configured it properly according to your taste. Also, assumed that you had installed the kernel and rebooted with it.</p><h3 id="3-Solution"><a href="#3-Solution" class="headerlink" title="3. Solution"></a>3. Solution</h3><p>Building only one module is easy. After configuring, build the source as following.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make M=path/to/module/directory</span><br><span class="line">make M=path/to/module/directory modules_install</span><br></pre></td></tr></table></figure><p>You can find the path of modules with <code>modinfo</code> command.<br>In my case, the required module was <code>kvm.ko</code>, and <code>kvm-intel.ko</code>. They were located in <code>arch/x86/kvm</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make M=arch/x86/kvm</span><br><span class="line">make M=arch/x86/kvm modules_install</span><br></pre></td></tr></table></figure><p>You can reload the new modules. I removed the <code>kvm-intel</code> module first because it depends on the <code>kvm</code> module.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rmmod kvm-intel kvm</span><br></pre></td></tr></table></figure><p>And, load the new modules.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe kvm-intel</span><br></pre></td></tr></table></figure><p>Loading <code>kvm-intel</code> will load <code>kvm</code> automatically.</p><p>FYI: the new modules are installed in <strong>/lib/modules/`uname -r`/extra</strong> directory.</p><h3 id="4-Troublesomes"><a href="#4-Troublesomes" class="headerlink" title="4. Troublesomes"></a>4. Troublesomes</h3><h4 id="4-1-modprobe-failure"><a href="#4-1-modprobe-failure" class="headerlink" title="4.1 modprobe failure."></a>4.1 <code>modprobe</code> failure.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe: error: could not insert &apos;kvm&apos;: exec format error</span><br></pre></td></tr></table></figure><p>The <code>modprobe</code> might fail if the version of a kernel module and that of a kernel are different. You can check the error with <code>dmesg</code> after the <code>modprobe</code> failure.</p><p>In my case, I built the kernel without any modification which resulted in the version number of <code>4.13.0-rc6</code>. When I modified the <code>kvm</code> module and compiled it, the version number was changed to <code>4.13.0-rc6+</code>.</p><p>My solution was building the kernel with some small modifications generating the version number as <code>4.13.0-rc6+</code> as a baseline.<br>The problem solved because the kvm module was also built with the same version number, <code>4.13.0-rc6+</code>, which did not produce any <code>modprobe</code> error.</p><h4 id="4-2-Location-of-generated-modules"><a href="#4-2-Location-of-generated-modules" class="headerlink" title="4. 2 Location of generated modules"></a>4. 2 Location of generated modules</h4><p>The modules generated with <code>M=path</code> options are installed into <strong>/lib/modules/`uname -r`/extra</strong> path. The path is different from the originally built one (when compiling the whole kernel) which is <strong>/lib/modules/`uname -r`/kernel/arch/x86/kvm</strong> in the case of <code>kvm</code>.</p><p>If you want to install a new module into the same location of original one, use <code>INSTALL_MOD_DIR</code> option. Example follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make INSTALL_MOD_DIR=kernel/arch/x86/kvm M=arch/x86/kvm modules_install</span><br></pre></td></tr></table></figure><p>如果<code>modprobe</code>中遇到其他问题，请参考<a href="/2021/11/26/commands-on-Linux-kernel-modules/">commands on Linux kernel modules</a>。</p><h3 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion"></a>5. Conclusion</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make M=arch/x86/kvm</span><br><span class="line">make INSTALL_MOD_DIR=kernel/arch/x86/kvm M=arch/x86/kvm modules_install</span><br><span class="line"></span><br><span class="line">rmmod kvm-intel kvm</span><br><span class="line">modprobe kvm-intel</span><br></pre></td></tr></table></figure><p>Create a simple shell file under your Linux source code root.</p><hr><p>参考资料:</p><ol><li><a href="https://yulistic.gitlab.io/2017/10/compiling-kernel-module-only-w/o-whole-kernel-compilation/" target="_blank" rel="noopener">Compiling kernel module only w/o whole kernel compilation</a></li><li><a href="https://www.cnblogs.com/haiyonghao/p/14440240.html" target="_blank" rel="noopener">linux内核中单独module的编译和使用</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何只编译内核的单个模块，然后reload新的模块呢？本文以kvm kernel module为例，阐述下具体的过程。本文转载自: &lt;a href=&quot;https://yulistic.gitlab.io/2017/10/compiling-kernel-module-only-w/o-whole-kernel-compilation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Compiling kernel module only w/o whole kernel compilation&lt;/a&gt;
    
    </summary>
    
      <category term="工具" scheme="http://liujunming.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Kernel" scheme="http://liujunming.github.io/tags/Kernel/"/>
    
      <category term="KVM" scheme="http://liujunming.github.io/tags/KVM/"/>
    
      <category term="工具" scheme="http://liujunming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第25期</title>
    <link href="http://liujunming.github.io/2021/11/25/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC25%E6%9C%9F/"/>
    <id>http://liujunming.github.io/2021/11/25/每周分享第25期/</id>
    <published>2021-11-25T02:27:36.000Z</published>
    <updated>2021-11-26T12:03:30.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-hear-and-I-forget-I-see-and-I-remember-I-do-and-I-understand"><a href="#I-hear-and-I-forget-I-see-and-I-remember-I-do-and-I-understand" class="headerlink" title="I hear and I forget, I see and I remember, I do and I understand."></a>I hear and I forget, I see and I remember, I do and I understand.</h3><p>不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。<br><a id="more"></a></p><h3 id="hololens"><a href="#hololens" class="headerlink" title="hololens"></a>hololens</h3><p>HoloLens是一个Windows 10的智能眼镜产品。</p><h3 id="破壁机"><a href="#破壁机" class="headerlink" title="破壁机"></a>破壁机</h3><p>破壁料理机集合了榨汁机、豆浆机、冰激凌机、料理机、研磨机等产品功能，完全达到一机多用功能，可以瞬间击破食物细胞壁，释放植物生化素的机器。</p><h3 id="我走了很远的路，吃了很多的苦，才将这份博士学位论文送到你的面前"><a href="#我走了很远的路，吃了很多的苦，才将这份博士学位论文送到你的面前" class="headerlink" title="我走了很远的路，吃了很多的苦，才将这份博士学位论文送到你的面前"></a>我走了很远的路，吃了很多的苦，才将这份博士学位论文送到你的面前</h3><p><a href="https://www.sohu.com/a/462173590_99992021" target="_blank" rel="noopener">https://www.sohu.com/a/462173590_99992021</a></p><h3 id="藏书羊肉"><a href="#藏书羊肉" class="headerlink" title="藏书羊肉"></a>藏书羊肉</h3><p><a href="https://new.qq.com/omn/20191103/20191103A0FTE000.html" target="_blank" rel="noopener">https://new.qq.com/omn/20191103/20191103A0FTE000.html</a></p><h3 id="高盛"><a href="#高盛" class="headerlink" title="高盛"></a>高盛</h3><p><a href="https://www.bilibili.com/video/BV1hy4y1h7Cu" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1hy4y1h7Cu</a></p><h3 id="PDU"><a href="#PDU" class="headerlink" title="PDU"></a>PDU</h3><p>Power distribution unit</p><p><a href="https://en.wikipedia.org/wiki/Power_distribution_unit" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Power_distribution_unit</a></p><h3 id="KVM-switch"><a href="#KVM-switch" class="headerlink" title="KVM switch"></a>KVM switch</h3><p>A KVM switch (with KVM being an abbreviation for “keyboard, video and mouse”) is a hardware device that allows a user to control multiple computers from one or more sets of keyboards, video monitors, and mice.</p><p><a href="https://en.wikipedia.org/wiki/KVM_switch" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/KVM_switch</a></p><h3 id="BMC"><a href="#BMC" class="headerlink" title="BMC"></a>BMC</h3><p>baseboard management controller (<em>BMC</em>) 底板管理控制器</p><p>A baseboard management controller (BMC) is a specialized service processor that monitors the physical state of a computer, network server or other hardware device using sensors and communicating with the system administrator through an independent connection. The BMC is part of the Intelligent Platform Management Interface (IPMI) and is usually contained in the motherboard or main circuit board of the device to be monitored.</p><p><a href="https://www.techtarget.com/searchnetworking/definition/baseboard-management-controller" target="_blank" rel="noopener">https://www.techtarget.com/searchnetworking/definition/baseboard-management-controller</a></p><p><a href="https://www.intel.cn/content/www/cn/zh/support/articles/000007913/server-products.html" target="_blank" rel="noopener">https://www.intel.cn/content/www/cn/zh/support/articles/000007913/server-products.html</a></p><h3 id="强者与弱者的零界点"><a href="#强者与弱者的零界点" class="headerlink" title="强者与弱者的零界点"></a>强者与弱者的零界点</h3><p>强者和弱者区别在于是否热爱解决问题。</p><p>善于总结、反思、分析、实践。</p><p>解决问题之前，最先需要培养的是观察和反思的能力，如果没有观察，就不会发现问题，如果不会观察就不会发现自己的心理变化，从而找到可以解决问题的办法，而反思是帮助我们基于观察后进行修正的修正值。</p><p><a href="https://www.zhihu.com/question/47410550/answer/148990988" target="_blank" rel="noopener">https://www.zhihu.com/question/47410550/answer/148990988</a></p><p>大部分人先解决身体健康问题，然后情绪心理问题，因为这关乎生命力，欲望，执行力，勇气，信心等等，其实心理问题和身体问题解决好了，生存发展和人际关系问题基本就迎刃而解了。</p><h3 id="第二届中国云计算基础架构开发者大会"><a href="#第二届中国云计算基础架构开发者大会" class="headerlink" title="第二届中国云计算基础架构开发者大会"></a>第二届中国云计算基础架构开发者大会</h3><p><a href="https://github.com/chinacid/cid_slides" target="_blank" rel="noopener">https://github.com/chinacid/cid_slides</a></p><p><a href="https://www.youku.com/profile/index/?spm=a2hbt.13141534.1_1.1&amp;uid=UMzc1NzQ2NDg0" target="_blank" rel="noopener">https://www.youku.com/profile/index/?spm=a2hbt.13141534.1_1.1&amp;uid=UMzc1NzQ2NDg0</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;I-hear-and-I-forget-I-see-and-I-remember-I-do-and-I-understand&quot;&gt;&lt;a href=&quot;#I-hear-and-I-forget-I-see-and-I-remember-I-do-and-I-understand&quot; class=&quot;headerlink&quot; title=&quot;I hear and I forget, I see and I remember, I do and I understand.&quot;&gt;&lt;/a&gt;I hear and I forget, I see and I remember, I do and I understand.&lt;/h3&gt;&lt;p&gt;不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="http://liujunming.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="经验" scheme="http://liujunming.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux MSR tools</title>
    <link href="http://liujunming.github.io/2021/11/21/Linux-MSR-tools/"/>
    <id>http://liujunming.github.io/2021/11/21/Linux-MSR-tools/</id>
    <published>2021-11-21T08:17:28.000Z</published>
    <updated>2021-11-21T10:16:17.903Z</updated>
    
    <content type="html"><![CDATA[<p>Notes about MSR tools in Linux，并结合一个具体的例子，展示其用法。<a id="more"></a>本文大部分内容源于<a href="https://ilinuxkernel.com/?p=255" target="_blank" rel="noopener">Linux读写CPU MSR寄存器命令rdmsr/wrmsr</a>。</p><p>Linux内核源码提供了读写CPU MSR寄存器模块，使得用户空间可以直接读写MSR寄存器。</p><p>开源社区提供msr寄存器读写工具:msr-tools，其中有两个命令，<code>rdmsr</code>/<code>wrmsr</code>。</p><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><p>要使<code>rdmsr</code>/<code>wrmsr</code>命令可以读写msr寄存器，系统中必须有msr模块，或将msr模块编译进内核。下面是从内核配置选项中选取的内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Processor type and features  —&gt;</span><br><span class="line">&lt;M&gt; /dev/cpu/*/msr – Model-specific register support</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modprobe msr</span><br><span class="line"></span><br><span class="line">apt-get install -y msr-tools</span><br></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@kvm:~# rdmsr -h</span><br><span class="line">Usage: rdmsr [options] regno</span><br><span class="line">  --help         -h  Print this help</span><br><span class="line">  --version      -V  Print current version</span><br><span class="line">  --hexadecimal  -x  Hexadecimal output (lower case)</span><br><span class="line">  --capital-hex  -X  Hexadecimal output (upper case)</span><br><span class="line">  --decimal      -d  Signed decimal output</span><br><span class="line">  --unsigned     -u  Unsigned decimal output</span><br><span class="line">  --octal        -o  Octal output</span><br><span class="line">  --c-language   -c  Format output as a C language constant</span><br><span class="line">  --zero-pad     -0  Output leading zeroes</span><br><span class="line">  --raw          -r  Raw binary output</span><br><span class="line">  --all          -a  all processors</span><br><span class="line">  --processor #  -p  Select processor number (default 0)</span><br><span class="line">  --bitfield h:l -f  Output bits [h:l] only</span><br><span class="line">root@kvm:~# wrmsr -h</span><br><span class="line">Usage: wrmsr [options] regno value...</span><br><span class="line">  --help         -h  Print this help</span><br><span class="line">  --version      -V  Print current version</span><br><span class="line">  --all          -a  all processors</span><br><span class="line">  --processor #  -p  Select processor number (default 0)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kvm:~# rdmsr -p 0 0x1b</span><br><span class="line">fee00d00</span><br><span class="line">root@kvm:~# rdmsr -p 1 0x1b</span><br><span class="line">fee00c00</span><br></pre></td></tr></table></figure><p><img src="/images/2021/11/12.png" alt></p><p>由此可加:</p><ul><li>CPU 0 has set BSP flag, while CPU 1 has cleared BSP flag</li><li>x2APIC mode is enabled</li><li>APIC Global enabled</li><li>…</li></ul><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p><code>/dev/cpu/CPUNUM/msr</code> provides  an interface to read and write the model-specific registers (MSRs) of an x86 CPU. CPUNUM is the number of the CPU to access as listed in /proc/cpuinfo.</p><p>The register access is done by opening the file and seeking to the MSR number as offset in the file, and then reading or writing in chunks  of  8 bytes. </p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><ul><li><code>man msr</code></li><li><a href="https://github.com/intel/msr-tools" target="_blank" rel="noopener">intel/msr-tools</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes about MSR tools in Linux，并结合一个具体的例子，展示其用法。
    
    </summary>
    
      <category term="工具" scheme="http://liujunming.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://liujunming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>binding/unbinding pci&amp;pcie devices</title>
    <link href="http://liujunming.github.io/2021/11/21/binding-unbinding-pci-pcie-devices/"/>
    <id>http://liujunming.github.io/2021/11/21/binding-unbinding-pci-pcie-devices/</id>
    <published>2021-11-21T03:10:27.000Z</published>
    <updated>2021-11-21T04:55:03.569Z</updated>
    
    <content type="html"><![CDATA[<p>Notes about binding/unbinding pci&amp;pcie devices。<a id="more"></a></p><p>当使用vfio pass-thru devices时，个人常用的方式为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpudevice=`cat /sys/bus/pci/devices/0000:00:02.0/device`</span><br><span class="line">echo 0000:00:02.0 &gt; /sys/bus/pci/devices/0000:00:02.0/driver/unbind</span><br><span class="line">echo "8086 $gpudevice" &gt; /sys/bus/pci/drivers/vfio-pci/new_id</span><br></pre></td></tr></table></figure><p>但是被问到了一个问题：为什么没用如下这一步呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 0000:00:02.0 &gt; /sys/bus/pci/driver/vfio-pci/bind</span><br></pre></td></tr></table></figure><p>发现自己无法回答该问题，因此，就有了本文。</p><p>对于<code>new_id</code>和<code>bind</code>的权威解释如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">What:/sys/bus/pci/drivers/.../bind</span><br><span class="line">What:/sys/devices/pciX/.../bind</span><br><span class="line">Date:December 2003</span><br><span class="line">Contact:linux-pci@vger.kernel.org</span><br><span class="line">Description:</span><br><span class="line">Writing a device location to this file will cause</span><br><span class="line">the driver to attempt to bind to the device found at</span><br><span class="line">this location.This is useful for overriding default</span><br><span class="line">bindings.  The format for the location is: DDDD:BB:DD.F.</span><br><span class="line">That is Domain:Bus:Device.Function and is the same as</span><br><span class="line">found in /sys/bus/pci/devices/.  For example::</span><br><span class="line"></span><br><span class="line">  # echo 0000:00:19.0 &gt; /sys/bus/pci/drivers/foo/bind</span><br><span class="line"></span><br><span class="line">What:/sys/bus/pci/drivers/.../new_id</span><br><span class="line">What:/sys/devices/pciX/.../new_id</span><br><span class="line">Date:December 2003</span><br><span class="line">Contact:linux-pci@vger.kernel.org</span><br><span class="line">Description:</span><br><span class="line">Writing a device ID to this file will attempt to</span><br><span class="line">dynamically add a new device ID to a PCI device driver.</span><br><span class="line">This may allow the driver to support more hardware than</span><br><span class="line">was included in the driver&apos;s static device ID support</span><br><span class="line">table at compile time.  The format for the device ID is:</span><br><span class="line">VVVV DDDD SVVV SDDD CCCC MMMM PPPP.  That is Vendor ID,</span><br><span class="line">Device ID, Subsystem Vendor ID, Subsystem Device ID,</span><br><span class="line">Class, Class Mask, and Private Driver Data.  The Vendor ID</span><br><span class="line">and Device ID fields are required, the rest are optional.</span><br><span class="line">Upon successfully adding an ID, the driver will probe</span><br><span class="line">for the device and attempt to bind to it.  For example::</span><br><span class="line"></span><br><span class="line">  # echo &quot;8086 10f5&quot; &gt; /sys/bus/pci/drivers/foo/new_id</span><br></pre></td></tr></table></figure><p>信息量还是不够,那只能继续！</p><p>从<a href="https://lore.kernel.org/kvm/1372776365.30572.874.camel@ul30vt.home/" target="_blank" rel="noopener">binding/unbinding devices to vfio-pci</a>可知：</p><p>The driver core will probe any unbound devices as soon as a new_id is added to vfio-pci.</p><p>That can be changed by:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> echo 0 &gt; /sys/bus/pci/drivers_autoprobe</span><br></pre></td></tr></table></figure><hr><p>结论: 写入<code>new_id</code> node，如果<code>drivers_autoprobe</code>开启，就会自动bind,无需写入<code>bind</code> node。否则，还是需要写入<code>bind</code> node。</p><p>若想研究细节，那只能看Linux内核源码了。</p><p>new_id: <a href="https://elixir.bootlin.com/linux/v5.14/source/drivers/pci/pci-driver.c#L173" target="_blank" rel="noopener">new_id_store</a></p><p>drivers_autoprobe: <a href="https://elixir.bootlin.com/linux/v5.14/source/drivers/base/bus.c#L231" target="_blank" rel="noopener">drivers_autoprobe_store</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new_id_store</span><br><span class="line">pci_add_dynid</span><br><span class="line">driver_attach</span><br><span class="line">__driver_attach</span><br><span class="line">driver_probe_device</span><br><span class="line">__driver_probe_device</span><br><span class="line">really_probe</span><br><span class="line">driver_bound</span><br><span class="line">driver_deferred_probe_trigger</span><br><span class="line">deferred_probe_work</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DECLARE_WORK</span><span class="params">(deferred_probe_work, deferred_probe_work_func)</span></span>;</span><br><span class="line">deferred_probe_work_func</span><br><span class="line">bus_probe_device</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bus_probe_device - probe drivers for a new device</span></span><br><span class="line"><span class="comment"> * @dev: device to probe</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - Automatically probe for a driver if the bus allows it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bus_probe_device</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bus_type</span> *<span class="title">bus</span> = <span class="title">dev</span>-&gt;<span class="title">bus</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bus-&gt;p-&gt;drivers_autoprobe)</span><br><span class="line">device_initial_probe(dev);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes about binding/unbinding pci&amp;amp;pcie devices。
    
    </summary>
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/categories/PCI-PCIe/"/>
    
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/tags/PCI-PCIe/"/>
    
  </entry>
  
  <entry>
    <title>How to translate virtual to physical addresses through /proc/pid/pagemap</title>
    <link href="http://liujunming.github.io/2021/11/20/How-to-translate-virtual-to-physical-addresses-through-proc-pid-pagemap/"/>
    <id>http://liujunming.github.io/2021/11/20/How-to-translate-virtual-to-physical-addresses-through-proc-pid-pagemap/</id>
    <published>2021-11-20T11:38:28.000Z</published>
    <updated>2021-11-20T16:22:45.340Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录/proc/pid/pagemap 相关notes，最权威的材料<a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt" target="_blank" rel="noopener">pagemap, from the userspace perspective</a>。<a id="more"></a></p><p>In newer kernels there is a really nice virtual file in the /proc file system to get this information. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGEMAP_ENTRY 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_BIT(X,Y) (X &amp; ((uint64_t)1<span class="meta-string">&lt;&lt;Y)) &gt;&gt; Y</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_PFN(X) X &amp; 0x7FFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> __endian_bit = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> is_bigendian() ( (*(char*)&amp;__endian_bit) == 0 )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, c, pid, status;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr; </span><br><span class="line"><span class="keyword">uint64_t</span> read_val, file_offset;</span><br><span class="line"><span class="keyword">char</span> path_buf [<span class="number">0x100</span>] = &#123;&#125;;</span><br><span class="line">FILE * f;</span><br><span class="line"><span class="keyword">char</span> *end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_pagemap</span><span class="params">(<span class="keyword">char</span> * path_buf, <span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(argc!=<span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Argument number is not correct!\n pagemap PID VIRTUAL_ADDRESS\n"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(argv[<span class="number">1</span>],<span class="string">"self"</span>,<span class="keyword">sizeof</span>(<span class="string">"self"</span>)))&#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(path_buf, <span class="string">"/proc/self/pagemap"</span>);</span><br><span class="line">      pid = <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">         pid = strtol(argv[<span class="number">1</span>],&amp;end, <span class="number">10</span>);</span><br><span class="line">         <span class="keyword">if</span> (end == argv[<span class="number">1</span>] || *end != <span class="string">'\0'</span> || pid&lt;=<span class="number">0</span>)&#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"PID must be a positive number or 'self'\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   virt_addr = strtol(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">   <span class="keyword">if</span>(pid!=<span class="number">-1</span>)</span><br><span class="line">      <span class="built_in">sprintf</span>(path_buf, <span class="string">"/proc/%u/pagemap"</span>, pid);</span><br><span class="line">   </span><br><span class="line">   read_pagemap(path_buf, virt_addr);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_pagemap</span><span class="params">(<span class="keyword">char</span> * path_buf, <span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr)</span></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Big endian? %d\n"</span>, is_bigendian());</span><br><span class="line">   f = fopen(path_buf, <span class="string">"rb"</span>);</span><br><span class="line">   <span class="keyword">if</span>(!f)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Error! Cannot open %s\n"</span>, path_buf);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//Shifting by virt-addr-offset number of bytes</span></span><br><span class="line">   <span class="comment">//and multiplying by the size of an address (the size of an entry in pagemap file)</span></span><br><span class="line">   file_offset = virt_addr / getpagesize() * PAGEMAP_ENTRY;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Vaddr: 0x%lx, Page_size: %d, Entry_size: %d\n"</span>, virt_addr, getpagesize(), PAGEMAP_ENTRY);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Reading %s at 0x%llx\n"</span>, path_buf, (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) file_offset);</span><br><span class="line">   status = fseek(f, file_offset, SEEK_SET);</span><br><span class="line">   <span class="keyword">if</span>(status)&#123;</span><br><span class="line">      perror(<span class="string">"Failed to do fseek!"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   errno = <span class="number">0</span>;</span><br><span class="line">   read_val = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> c_buf[PAGEMAP_ENTRY];</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; PAGEMAP_ENTRY; i++)&#123;</span><br><span class="line">      c = getc(f);</span><br><span class="line">      <span class="keyword">if</span>(c==EOF)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\nReached end of the file\n"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(is_bigendian())</span><br><span class="line">           c_buf[i] = c;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">           c_buf[PAGEMAP_ENTRY - i - <span class="number">1</span>] = c;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%d]0x%x "</span>, i, c);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; PAGEMAP_ENTRY; i++)&#123;</span><br><span class="line">      read_val = (read_val &lt;&lt; <span class="number">8</span>) + c_buf[i];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Result: 0x%llx\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) read_val);</span><br><span class="line">   <span class="keyword">if</span>(GET_BIT(read_val, <span class="number">63</span>))</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"PFN: 0x%llx\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) GET_PFN(read_val));</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Page not present\n"</span>);</span><br><span class="line">   <span class="keyword">if</span>(GET_BIT(read_val, <span class="number">62</span>))</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Page swapped\n"</span>);</span><br><span class="line">   fclose(f);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now how you use it. It’s very simple. Of course you need to compile it. Then you need to find out what mapping your target process does have. You can do that by reading /proc/pid/maps file. Fortunately that file is human readable.</p><p>When you know a valid virtual address, you can pass it to our tool to get actual value from pagemap, including physical frame number. Here is an example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo su</span><br><span class="line"><span class="meta">$</span> # disable aslr</span><br><span class="line"><span class="meta">$</span> echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span> cat /proc/self/maps</span><br><span class="line">555555554000-55555555c000 r-xp 00000000 103:02 14286873                  /bin/cat</span><br><span class="line">55555575b000-55555575c000 r--p 00007000 103:02 14286873                  /bin/cat</span><br><span class="line">55555575c000-55555575d000 rw-p 00008000 103:02 14286873                  /bin/cat</span><br><span class="line">55555575d000-55555577e000 rw-p 00000000 00:00 0                          [heap]</span><br><span class="line">7ffff7013000-7ffff79e2000 r--p 00000000 103:02 10623634                  /usr/lib/locale/locale-archive</span><br><span class="line">7ffff79e2000-7ffff7bc9000 r-xp 00000000 103:02 4980818                   /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7bc9000-7ffff7dc9000 ---p 001e7000 103:02 4980818                   /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dc9000-7ffff7dcd000 r--p 001e7000 103:02 4980818                   /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcd000-7ffff7dcf000 rw-p 001eb000 103:02 4980818                   /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">7ffff7dcf000-7ffff7dd3000 rw-p 00000000 00:00 0</span><br><span class="line">7ffff7dd3000-7ffff7dfc000 r-xp 00000000 103:02 4980742                   /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7fc0000-7ffff7fe4000 rw-p 00000000 00:00 0</span><br><span class="line">7ffff7ff8000-7ffff7ffb000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">7ffff7ffc000-7ffff7ffd000 r--p 00029000 103:02 4980742                   /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffd000-7ffff7ffe000 rw-p 0002a000 103:02 4980742                   /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class="line">7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0</span><br><span class="line">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]</span><br><span class="line"><span class="meta">$</span> #so let's pick 0x555555554000. Now we run our program. </span><br><span class="line"><span class="meta">$</span> #First argument is pid, "self" is a legal option too, the second is virtual address</span><br><span class="line"><span class="meta">$</span> ./pagemap self 0x555555554000</span><br><span class="line">Big endian? 0</span><br><span class="line">Vaddr: 0x555555554000, Page_size: 4096, Entry_size: 8</span><br><span class="line">Reading /proc/self/pagemap at 0x2aaaaaaaa0</span><br><span class="line">[0]0x68 [1]0x65 [2]0x1e [3]0x0 [4]0x0 [5]0x0 [6]0x80 [7]0xa1</span><br><span class="line">Result: 0xa1800000001e6568</span><br><span class="line">PFN: 0x1e6568</span><br></pre></td></tr></table></figure><p>We got  <strong>0x1e6568</strong> as a result. There are some bits showing that the page is valid, along with the size of the page. You can read more in Linux documentation: <a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt" target="_blank" rel="noopener">pagemap, from the userspace perspective</a>. Basically, the physical page number is 0x1e6568.</p><p>The kernel implementation for /proc/pid/pagemap: <a href="https://elixir.bootlin.com/linux/v5.14/source/fs/proc/task_mmu.c#L1579" target="_blank" rel="noopener">pagemap_read</a></p><hr><p>参考资料:</p><ol><li><a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt" target="_blank" rel="noopener">pagemap, from the userspace perspective</a></li><li><a href="http://fivelinesofcode.blogspot.com/2014/03/how-to-translate-virtual-to-physical.html" target="_blank" rel="noopener">How to translate virtual to physical addresses through /proc/pid/pagemap</a></li><li><a href="https://askubuntu.com/questions/318315/how-can-i-temporarily-disable-aslr-address-space-layout-randomization" target="_blank" rel="noopener">How can I temporarily disable ASLR (Address space layout randomization)?</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录/proc/pid/pagemap 相关notes，最权威的材料&lt;a href=&quot;https://www.kernel.org/doc/Documentation/vm/pagemap.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pagemap, from the userspace perspective&lt;/a&gt;。
    
    </summary>
    
      <category term="内存管理" scheme="http://liujunming.github.io/categories/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="内存管理" scheme="http://liujunming.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第24期</title>
    <link href="http://liujunming.github.io/2021/11/19/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC24%E6%9C%9F/"/>
    <id>http://liujunming.github.io/2021/11/19/每周分享第24期/</id>
    <published>2021-11-19T04:58:21.000Z</published>
    <updated>2021-11-19T09:27:45.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scatter-gather"><a href="#scatter-gather" class="headerlink" title="scatter/gather"></a>scatter/gather</h3><p>In computing, scatter/gather I/O, is a method of input and output by which a single procedure call sequentially reads data from multiple buffers and writes it to a single data stream, or reads data from a data stream and writes it to multiple buffers, as defined in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.  <a id="more"></a></p><p><a href="https://en.wikipedia.org/wiki/Vectored_I/O" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Vectored_I/O</a></p><h3 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h3><p>Preboot execution environment (PXE) is a set of standards that enables a computer to load an operating system (OS) over a network connection.</p><p>PXE提供了一种使用网络接口启动计算机的机制。这种机制让计算机的启动可以不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统。</p><h3 id="Video-Live-captions-amp-subtitles"><a href="#Video-Live-captions-amp-subtitles" class="headerlink" title="Video: Live captions &amp; subtitles"></a>Video: Live captions &amp; subtitles</h3><p>PowerPoint for Microsoft 365 and PowerPoint for the web now offer captions or subtitles shown live on the big screen as you present to your audience.</p><p><a href="https://support.microsoft.com/en-us/office/video-live-captions-subtitles-371bd124-855f-46a9-a923-5371c10f36c5" target="_blank" rel="noopener">https://support.microsoft.com/en-us/office/video-live-captions-subtitles-371bd124-855f-46a9-a923-5371c10f36c5</a></p><h3 id="Arjian不是Arjan：樱桃司这八年"><a href="#Arjian不是Arjan：樱桃司这八年" class="headerlink" title="Arjian不是Arjan：樱桃司这八年"></a>Arjian不是Arjan：樱桃司这八年</h3><p><a href="https://blog.csdn.net/bjchenxu/article/details/107036093" target="_blank" rel="noopener">https://blog.csdn.net/bjchenxu/article/details/107036093</a></p><h3 id="知识，经验，能力，潜力"><a href="#知识，经验，能力，潜力" class="headerlink" title="知识，经验，能力，潜力"></a>知识，经验，能力，潜力</h3><p>知识：看一本书<br>经验：做事情用到书里的知识<br>能力：总结经验，并可以复制<br>潜力：基于能力，面对未知可以从容解决 </p><h3 id="世界观和方法论"><a href="#世界观和方法论" class="headerlink" title="世界观和方法论"></a>世界观和方法论</h3><ol><li>世界观是人们对世界（宇宙）总的根本的观点。</li><li>方法论是指导人们认识世界、改造世界的最一般、最根本的思维方式和思维理念。</li><li>世界观与方法论是一致的。有什么样的世界观就有什么样的方法论。</li><li>世界观指导方法论，方法论贯彻世界观。世界观更根本。</li></ol><p><a href="https://www.zhihu.com/question/64917144/answer/225552583" target="_blank" rel="noopener">https://www.zhihu.com/question/64917144/answer/225552583</a></p><h3 id="C-if-statement-with-amp-amp-Which-function-will-execute-first"><a href="#C-if-statement-with-amp-amp-Which-function-will-execute-first" class="headerlink" title="C if statement with &amp;&amp; - Which function will execute first?"></a>C if statement with &amp;&amp; - Which function will execute first?</h3><p><a href="https://stackoverflow.com/questions/8300519/c-if-statement-with-which-function-will-execute-first" target="_blank" rel="noopener">https://stackoverflow.com/questions/8300519/c-if-statement-with-which-function-will-execute-first</a></p><h3 id="gerrit"><a href="#gerrit" class="headerlink" title="gerrit"></a>gerrit</h3><p>Gerrit is a highly extensible and configurable tool for web-based code review and repository management for projects using the Git version control system.</p><p><a href="https://www.youtube.com/watch?v=Wxx8XndqZ7A" target="_blank" rel="noopener">Using Gerrit to enhance your Git</a></p><h3 id="EfiRom-Utility"><a href="#EfiRom-Utility" class="headerlink" title="EfiRom Utility"></a>EfiRom Utility</h3><p>Use the <code>EfiRom</code> utility to build PCI Option ROM Images containing UEFI Drivers, PC BIOS legacy option ROM images, or both, in a format conforming to the <em>PCI 2.3 Specification and PCI 3.0 Specification</em>. </p><p>输入: UEFI Drivers + VendorId + DeviceId<br>输出：PCI Option ROM Images</p><p><a href="https://edk2-docs.gitbook.io/edk-ii-basetools-user-guides/efirom" target="_blank" rel="noopener">EfiRom.exe</a><br><a href="https://edk2-docs.gitbook.io/edk-ii-uefi-driver-writer-s-guide/18_pci_driver_design_guidelines/readme.7/1871_efirom_utility" target="_blank" rel="noopener">EfiRom Utility</a></p><h3 id="英特尔的安腾-Itanium-架构处理器是怎么失败的？"><a href="#英特尔的安腾-Itanium-架构处理器是怎么失败的？" class="headerlink" title="英特尔的安腾 (Itanium) 架构处理器是怎么失败的？"></a>英特尔的安腾 (Itanium) 架构处理器是怎么失败的？</h3><p><a href="https://www.zhihu.com/question/22666196" target="_blank" rel="noopener">https://www.zhihu.com/question/22666196</a></p><h3 id="如何评价蚂蚁金服新推出的知识平台-语雀？"><a href="#如何评价蚂蚁金服新推出的知识平台-语雀？" class="headerlink" title="如何评价蚂蚁金服新推出的知识平台 - 语雀？"></a>如何评价蚂蚁金服新推出的知识平台 - 语雀？</h3><p><a href="https://www.yuque.com/" target="_blank" rel="noopener">https://www.yuque.com/</a></p><p>语雀是一个企业级协作服务，提供文档、表格、项目管理等协作工具，帮助企业沉淀、整理内部信息和知识。</p><p>语雀的愿景是让个人和企业都拥有自己的线上知识中心。<br><a href="https://www.zhihu.com/question/264707678" target="_blank" rel="noopener">https://www.zhihu.com/question/264707678</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;scatter-gather&quot;&gt;&lt;a href=&quot;#scatter-gather&quot; class=&quot;headerlink&quot; title=&quot;scatter/gather&quot;&gt;&lt;/a&gt;scatter/gather&lt;/h3&gt;&lt;p&gt;In computing, scatter/gather I/O, is a method of input and output by which a single procedure call sequentially reads data from multiple buffers and writes it to a single data stream, or reads data from a data stream and writes it to multiple buffers, as defined in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.
    
    </summary>
    
      <category term="经验" scheme="http://liujunming.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="经验" scheme="http://liujunming.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Live Migration With Hardware Acceleration</title>
    <link href="http://liujunming.github.io/2021/11/18/Live-Migration-With-Hardware-Acceleration/"/>
    <id>http://liujunming.github.io/2021/11/18/Live-Migration-With-Hardware-Acceleration/</id>
    <published>2021-11-18T12:15:30.000Z</published>
    <updated>2021-11-19T09:27:45.090Z</updated>
    
    <content type="html"><![CDATA[<p>Notes about Live Migration With Hardware Acceleration.<br><a href="https://static.sched.com/hosted_files/kvmforum2020/6e/Oct%2030_Live%20Migration%20with%20Hardware%20Acceleration_Wei%20Wang%20.pdf" target="_blank" rel="noopener">slides</a><br><a href="https://www.youtube.com/watch?v=c_DyiOmJdtI" target="_blank" rel="noopener">video</a><br><a id="more"></a></p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>Live migration pain points<ul><li>VMs with memory write intensive workloads are difficult to migrate</li><li>VMs with large memory size takes long time to migrate</li><li>May consume large network bandwidth</li></ul></li><li>Existing solution: compression with CPUs<ul><li>Slow</li><li>Consumes too many CPUs from host</li></ul></li><li>Our solution<ul><li>Offload the compression part to Intel QAT with efficient approaches<ul><li>Higher migration throughput</li><li>Lower CPU utilization</li></ul></li><li>A common design ready for future more accelerators to join in<ul><li>Data Streaming Accelerator (DSA) and Intel Analytics Accelerator (IAX) coming on Sapphire Rapids CPUs</li><li>Smart Selection</li></ul></li></ul></li></ul><h3 id="QAT"><a href="#QAT" class="headerlink" title="QAT"></a>QAT</h3><p>QuickAssist Technology (QAT) accelerates cryptographic and compression workloads by offloading the data to hardware capable of optimizing those functions.</p><h3 id="IAX"><a href="#IAX" class="headerlink" title="IAX"></a>IAX</h3><p>(Intel Analytics Accelerator)</p><p>Has compression capability</p><h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>(Data Streaming Accelerator)</p><p>DSA is a high-performance data copy and transformation accelerator that will be integrated in future Intel® processors, targeted for optimizing streaming data movement and transformation operations common with applications for high-performance storage, networking, persistent memory, and various data processing applications.</p><p>Intel® DSA replaces the Intel® QuickData Technology, which is a part of Intel® I/O Acceleration Technology.</p><p>The goal is to provide higher overall system performance for data mover and transformation operations, while freeing up CPU cycles for higher level functions. </p><h3 id="Smart-Acceleration-Support"><a href="#Smart-Acceleration-Support" class="headerlink" title="Smart Acceleration Support"></a>Smart Acceleration Support</h3><ul><li>DSA compares the dirty memory, and sends the “diff” to the destination only<ul><li>Good when the guest only modifies a small part of a page</li><li>Bad when the entire pages are changed</li></ul></li><li>Smart Acceleration<ul><li>Dynamically switch to use QAT/IAX compression or DSA diff during live migration using a prediction based on the compression ratio history and diff ratio history</li></ul></li></ul><hr><p>参考资料:</p><ol><li><a href="https://kb.vmware.com/s/article/84039" target="_blank" rel="noopener">Information for the Intel® QuickAssist Technology (Intel® QAT) Single Root I/O Virtualization (SR-IOV) driver for VMware ESXi (84039)</a></li><li><a href="https://01.org/blogs/2019/introducing-intel-data-streaming-accelerator" target="_blank" rel="noopener">INTRODUCING THE INTEL® DATA STREAMING ACCELERATOR (INTEL® DSA)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes about Live Migration With Hardware Acceleration.&lt;br&gt;&lt;a href=&quot;https://static.sched.com/hosted_files/kvmforum2020/6e/Oct%2030_Live%20Migration%20with%20Hardware%20Acceleration_Wei%20Wang%20.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;slides&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=c_DyiOmJdtI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;video&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>VT-x Posted Interrupt Code Analysis</title>
    <link href="http://liujunming.github.io/2021/11/14/VT-x-Posted-Interrupt-Code-Analysis/"/>
    <id>http://liujunming.github.io/2021/11/14/VT-x-Posted-Interrupt-Code-Analysis/</id>
    <published>2021-11-14T02:38:26.000Z</published>
    <updated>2021-11-14T10:39:17.727Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2020/10/07/Introduction-to-Posted-interrupt/">Introduction to VT-x Posted-interrupt</a>介绍了原理，本文将结合KVM代码，介绍VT-x Posted Interrupt的实现细节。<a id="more"></a></p><p>source code:<br><a href="https://elixir.bootlin.com/linux/v5.14/source" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v5.14/source</a></p><h3 id="vmx-deliver-posted-interrupt"><a href="#vmx-deliver-posted-interrupt" class="headerlink" title="vmx_deliver_posted_interrupt"></a>vmx_deliver_posted_interrupt</h3><p>假设guest运行在x2APIC mode下，当source vCPU写ICR寄存器时，会发生VM Exit。</p><p>KVM的函数调用链如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kvm_emulate_wrmsr</span><br><span class="line">kvm_set_msr</span><br><span class="line">kvm_set_msr_ignored_check</span><br><span class="line">__kvm_set_msr</span><br><span class="line">static_call(kvm_x86_set_msr)[vmx_set_msr]</span><br><span class="line">kvm_set_msr_common</span><br><span class="line">kvm_x2apic_msr_write</span><br><span class="line">kvm_lapic_reg_write</span><br><span class="line">kvm_apic_send_ipi</span><br><span class="line">kvm_irq_delivery_to_apic</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kvm_irq_delivery_to_apic</span><br><span class="line">kvm_irq_delivery_to_apic_fast</span><br><span class="line">kvm_apic_set_irq</span><br><span class="line">__apic_accept_irq</span><br><span class="line">kvm_x86_deliver_posted_interrupt[vmx_deliver_posted_interrupt]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Send interrupt to vcpu via posted interrupt way.</span></span><br><span class="line"><span class="comment"> * 1. If target vcpu is running(non-root mode), send posted interrupt</span></span><br><span class="line"><span class="comment"> * notification to vcpu and hardware will sync PIR to vIRR atomically.</span></span><br><span class="line"><span class="comment"> * 2. If target vcpu isn't running(root mode), kick it to pick up the</span></span><br><span class="line"><span class="comment"> * interrupt from PIR in next vmentry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vmx_deliver_posted_interrupt</span><span class="params">(struct kvm_vcpu *vcpu, <span class="keyword">int</span> <span class="built_in">vector</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vcpu_vmx</span> *<span class="title">vmx</span> = <span class="title">to_vmx</span>(<span class="title">vcpu</span>);</span></span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!vcpu-&gt;arch.apicv_active)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pi_test_and_set_pir(<span class="built_in">vector</span>, &amp;vmx-&gt;pi_desc))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If a previous notification has sent the IPI, nothing to do.  */</span></span><br><span class="line"><span class="keyword">if</span> (pi_test_and_set_on(&amp;vmx-&gt;pi_desc))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vcpu != kvm_get_running_vcpu() &amp;&amp;</span><br><span class="line">    !kvm_vcpu_trigger_posted_interrupt(vcpu, <span class="literal">false</span>))</span><br><span class="line"><span class="comment">// Kick a sleeping VCPU, or a guest VCPU in guest mode, into host kernel mode.</span></span><br><span class="line">kvm_vcpu_kick(vcpu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">kvm_vcpu_trigger_posted_interrupt</span><span class="params">(struct kvm_vcpu *vcpu,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">bool</span> nested)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="keyword">int</span> pi_vec = POSTED_INTR_VECTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vcpu-&gt;mode == IN_GUEST_MODE) &#123;</span><br><span class="line"><span class="comment">// 给vCPU所在的physical CPU发送一个Notification Event</span></span><br><span class="line">apic-&gt;send_IPI_mask(get_cpu_mask(vcpu-&gt;cpu), pi_vec);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If target vcpu isn’t running(root mode), kick it(<code>kvm_vcpu_kick(vcpu)</code>) to pick up the interrupt from PIR in next vmentry.</p><h3 id="vmx-sync-pir-to-irr"><a href="#vmx-sync-pir-to-irr" class="headerlink" title="vmx_sync_pir_to_irr"></a>vmx_sync_pir_to_irr</h3><p>pick up the interrupt from PIR in the next vmentry这一步的代码解析如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vcpu_enter_guest</span><span class="params">(struct kvm_vcpu *vcpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This handles the case where a posted interrupt was</span></span><br><span class="line"><span class="comment"> * notified with kvm_vcpu_kick.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (kvm_lapic_enabled(vcpu) &amp;&amp; vcpu-&gt;arch.apicv_active)</span><br><span class="line"><span class="comment">// vmx_sync_pir_to_irr(vcpu) is called</span></span><br><span class="line">static_call(kvm_x86_sync_pir_to_irr)(vcpu);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vmx_sync_pir_to_irr</span><span class="params">(struct kvm_vcpu *vcpu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vcpu_vmx</span> *<span class="title">vmx</span> = <span class="title">to_vmx</span>(<span class="title">vcpu</span>);</span></span><br><span class="line"><span class="keyword">int</span> max_irr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pi_test_on(&amp;vmx-&gt;pi_desc)) &#123;</span><br><span class="line">pi_clear_on(&amp;vmx-&gt;pi_desc);</span><br><span class="line">kvm_apic_update_irr(vcpu, vmx-&gt;pi_desc.pir, &amp;max_irr);</span><br><span class="line">kvm_make_request(KVM_REQ_EVENT, vcpu);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">max_irr = kvm_lapic_find_highest_irr(vcpu);</span><br><span class="line">&#125;</span><br><span class="line">vmx_set_rvi(max_irr);</span><br><span class="line"><span class="keyword">return</span> max_irr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kvm_apic_update_irr</span><br><span class="line">__kvm_apic_update_irr</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> __kvm_apic_update_irr(u32 *pir, <span class="keyword">void</span> *regs, <span class="keyword">int</span> *max_irr)</span><br><span class="line">&#123;</span><br><span class="line">u32 i, vec;</span><br><span class="line">u32 pir_val, irr_val, prev_irr_val;</span><br><span class="line"><span class="keyword">int</span> max_updated_irr;</span><br><span class="line"></span><br><span class="line">max_updated_irr = <span class="number">-1</span>;</span><br><span class="line">*max_irr = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = vec = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++, vec += <span class="number">32</span>) &#123;</span><br><span class="line">pir_val = READ_ONCE(pir[i]);</span><br><span class="line">irr_val = *((u32 *)(regs + APIC_IRR + i * <span class="number">0x10</span>));</span><br><span class="line"><span class="keyword">if</span> (pir_val) &#123;</span><br><span class="line">prev_irr_val = irr_val;</span><br><span class="line">irr_val |= xchg(&amp;pir[i], <span class="number">0</span>);</span><br><span class="line">*((u32 *)(regs + APIC_IRR + i * <span class="number">0x10</span>)) = irr_val;</span><br><span class="line"><span class="keyword">if</span> (prev_irr_val != irr_val) &#123;</span><br><span class="line">max_updated_irr =</span><br><span class="line">__fls(irr_val ^ prev_irr_val) + vec;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (irr_val)</span><br><span class="line">*max_irr = __fls(irr_val) + vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((max_updated_irr != <span class="number">-1</span>) &amp;&amp;</span><br><span class="line">(max_updated_irr == *max_irr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一言以蔽之: <code>vmx_sync_pir_to_irr</code>所做的工作就是下图绿框中标注的步骤。区别在于：如果target vcpu is running(root mode)，上述步骤由硬件来完成；否则，需要调用<code>vmx_sync_pir_to_irr</code>由软件来完成。</p><p><img src="/images/2021/11/11.png" alt></p><hr><p>推荐材料:</p><ul><li><p><a href="https://elixir.bootlin.com/linux/v5.14/source/arch/x86/kvm/vmx/posted_intr.h" target="_blank" rel="noopener">posted_intr.h</a>定义了posted interrupt会用到的一些基本数据结构和常用函数，可结合着spec阅读</p></li><li><p><a href="https://lore.kernel.org/kvm/1365679516-13125-1-git-send-email-yang.z.zhang@intel.com/" target="_blank" rel="noopener">[PATCH v10 0/7] KVM: VMX: Add Posted Interrupt supporting</a>包含更多的实现细节，值得深挖</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2020/10/07/Introduction-to-Posted-interrupt/&quot;&gt;Introduction to VT-x Posted-interrupt&lt;/a&gt;介绍了原理，本文将结合KVM代码，介绍VT-x Posted Interrupt的实现细节。
    
    </summary>
    
      <category term="中断" scheme="http://liujunming.github.io/categories/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="中断" scheme="http://liujunming.github.io/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Notes about XSAVE feature set</title>
    <link href="http://liujunming.github.io/2021/11/12/Notes-about-XSAVE-feature-set/"/>
    <id>http://liujunming.github.io/2021/11/12/Notes-about-XSAVE-feature-set/</id>
    <published>2021-11-12T01:52:28.000Z</published>
    <updated>2021-11-12T10:29:59.805Z</updated>
    
    <content type="html"><![CDATA[<p>mark下个人对XSAVE feature set的一点理解。本文大部分内容源于组内同学的知识分享，并非作者个人原创。<a id="more"></a><br>读者若想深入研究XSAVE feature set，Intel SDM Vol1 “MANAGING STATE USING THE XSAVE FEATURE SET”这章的内容就是极佳的材料。</p><h2 id="1-Why"><a href="#1-Why" class="headerlink" title="1. Why?"></a>1. Why?</h2><p>一言以蔽之：Support the saving and restoring of processor state by hardware instead of software.</p><p>线程可能会用到X87,SSE,AVX512等feature，这些feature会包含很多的寄存器。如果每次线程切换时，系统软件都需要手动save and restore这些寄存器，那样开销会很大。为此，XSAVE feature set应运而生，系统软件只需要调用XSAVE feature set提供的指令，即可让硬件来完成X87,SSE,AVX512等寄存器的save与restore功能！</p><h2 id="2-Overview"><a href="#2-Overview" class="headerlink" title="2. Overview"></a>2. Overview</h2><p>The XSAVE feature set supports the saving and restoring of <strong>state components</strong>, each of which is a discrete set of processor registers (or parts of registers). Each such state component corresponds to an XSAVE-supported feature. The XSAVE feature set organizes the state components of the XSAVE-supported features using state component bitmaps. A state-component bitmap comprises 64 bits; each bit in such a bitmap corresponds to a single state component. Some state components are supervisor state components. The XSAVE feature supports supervisor state components with only the XSAVES and XRSTORS instructions.</p><ul><li>For User state components, Specified by XCR0</li><li>For Supervisor state components, Specified by IA32_XSS MSR</li></ul><p><strong>XSAVE-enabled</strong> features (those features that require use of the XSAVE feature set for their enabling) .</p><p><img src="/images/2021/11/10.png" alt></p><p><img src="/images/2021/11/5.png" alt></p><h2 id="3-XSAVE-Area"><a href="#3-XSAVE-Area" class="headerlink" title="3. XSAVE Area"></a>3. XSAVE Area</h2><p>The XSAVE feature set allows saving and loading processor state from a region of memory called  XSAVE area.</p><p><img src="/images/2021/11/6.png" alt></p><h3 id="3-1-Legacy-Region"><a href="#3-1-Legacy-Region" class="headerlink" title="3.1 Legacy Region"></a>3.1 Legacy Region</h3><p><img src="/images/2021/11/7.png" alt></p><h3 id="3-2-XSAVE-Header"><a href="#3-2-XSAVE-Header" class="headerlink" title="3.2 XSAVE Header"></a>3.2 XSAVE Header</h3><p><img src="/images/2021/11/8.png" alt></p><p><strong>XCOMP_BV[63]</strong> indicates the format of the extended region of the XSAVE area (see Section 13.4.3). </p><ul><li>If it is clear, the standard format is used. </li><li>If it is set, the compacted format is used; XCOMP_BV[62:0] provide format specifics as specified in Section 13.4.3.</li></ul><p>为什么需要区分standard format与compacted format呢？其实就是为了节省内存。例如，某线程没用使用AVX512 feature，那么，compacted format就不会在Extended Region里存储AVX512相关的寄存器状态。</p><h3 id="3-3-Extended-Region"><a href="#3-3-Extended-Region" class="headerlink" title="3.3 Extended Region"></a>3.3 Extended Region</h3><p>The XSAVE feature set uses the <u>extended area</u> for <u>each state component i, where i ≥ 2</u>.</p><p>All state components other than X87 and SSE are using the extended region.</p><p>Format of extended region:</p><ul><li>Standard format</li><li>Compacted format</li></ul><h4 id="3-3-1-Standard-Format"><a href="#3-3-1-Standard-Format" class="headerlink" title="3.3.1 Standard Format"></a>3.3.1 Standard Format</h4><p>Supported by all processors that support the XSAVE feature set.</p><p>Location of each state component i (i ≥ 2) is determined by CPUID.</p><ul><li>Offset: CPUID.(EAX=0DH,ECX=i):EBX</li><li>Size: CPUID.(EAX=0DH,ECX=i):EAX</li></ul><h4 id="3-3-2-Compacted-Format"><a href="#3-3-2-Compacted-Format" class="headerlink" title="3.3.2 Compacted Format"></a>3.3.2 Compacted Format</h4><p>Supported by those processors that support the compaction extensions CPUID.(EAX=0DH,ECX=1):EAX[1]</p><p>Location of each state component i (i ≥ 2) is determined by <u>CPUID</u> and <u>XCOMP_BV</u> field in the XSAVE header.</p><ul><li>Offset: refer to section 13.4.3, Vol.1, SDM</li><li>Size: CPUID.(EAX=0DH,ECX=i):EAX</li></ul><h2 id="4-Optimization"><a href="#4-Optimization" class="headerlink" title="4. Optimization"></a>4. Optimization</h2><p>The <strong>XSAVEOPT, XSAVEC, and XSAVES</strong> instructions use two optimizations to <u>reduce the amount of data that they write to memory</u>.</p><h3 id="4-1-The-init-optimization"><a href="#4-1-The-init-optimization" class="headerlink" title="4.1 The init optimization"></a>4.1 The init optimization</h3><p>Avoid writing data for any state component known to be in its <u>initial configuration</u>.</p><h3 id="4-2-The-modified-optimization"><a href="#4-2-The-modified-optimization" class="headerlink" title="4.2 The modified optimization"></a>4.2 The modified optimization</h3><p>If either XSAVEOPT or XSAVES is using the <u>same XSAVE area</u> as that used by the <u>most recent execution of XRSTOR or XRSTORS</u>, it may avoid writing data for any state component whose configuration is known <u>not to have been modified since then</u>.</p><h2 id="5-Instructions-Summary"><a href="#5-Instructions-Summary" class="headerlink" title="5. Instructions Summary"></a>5. Instructions Summary</h2><p><img src="/images/2021/11/9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mark下个人对XSAVE feature set的一点理解。本文大部分内容源于组内同学的知识分享，并非作者个人原创。
    
    </summary>
    
      <category term="体系结构" scheme="http://liujunming.github.io/categories/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="体系结构" scheme="http://liujunming.github.io/tags/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Notes about ivshmem</title>
    <link href="http://liujunming.github.io/2021/11/11/Notes-about-ivshmem/"/>
    <id>http://liujunming.github.io/2021/11/11/Notes-about-ivshmem/</id>
    <published>2021-11-11T13:32:45.000Z</published>
    <updated>2021-11-12T10:29:59.805Z</updated>
    
    <content type="html"><![CDATA[<p>mark下ivshmem相关笔记。<a id="more"></a></p><p>ivshmem是QEMU提供的一种宿主机与虚拟机之间或多个虚拟机之间共享内存的特殊设备。它有两种形式:</p><ul><li><strong>ivshmem-plain</strong>: 简单的共享内存区域</li><li><strong>ivshmem-doorbel</strong>: 除了共享内存，还能提供基于中断的通信机制</li></ul><p>这种设备在虚拟机内部表现为PCI设备，共享的内存区域则以PCI BAR的形式存在。ivshmem PCI设备提供3个BAR:</p><ul><li>BAR0: 设备寄存器</li><li>BAR1: MSI-X表</li><li>BAR2: 共享内存区域</li></ul><p>简单的共享内存场景只使用BAR2。如果需要基于中断实现额外通信，需要用到BAR0和BAR1。</p><p>只考虑共享内存这个场景，是如何做到内存共享的呢？在不同的虚拟机(这些虚拟机会共享内存)内，ivshmem device的BAR2地址(GPA)可能不同，但是对应的HPA是一样的，hypervisor会为不同虚拟机的ivshmem device的BAR2内存区域建立EPT映射，因此就达到共享内存的目的！<br>即:</p><ul><li>GPA1-&gt;HPA1</li><li>GPA2-&gt;HPA1</li></ul><p>Evidence on ACRN hypervisor:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hypervisor code</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ivshmem_vbar_map</span><span class="params">(struct pci_vdev *vdev, <span class="keyword">uint32_t</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">acrn_vm</span> *<span class="title">vm</span> = <span class="title">vpci2vm</span>(<span class="title">vdev</span>-&gt;<span class="title">vpci</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pci_vbar</span> *<span class="title">vbar</span> = &amp;<span class="title">vdev</span>-&gt;<span class="title">vbars</span>[<span class="title">idx</span>];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ivshmem_device</span> *<span class="title">ivs_dev</span> = (<span class="title">struct</span> <span class="title">ivshmem_device</span> *) <span class="title">vdev</span>-&gt;<span class="title">priv_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((idx == IVSHMEM_SHM_BAR) &amp;&amp; (vbar-&gt;base_hpa != INVALID_HPA) &amp;&amp; (vbar-&gt;base_gpa != <span class="number">0U</span>L)) &#123;</span><br><span class="line"><span class="comment">//ept_add_mr is called to build EPT mapping for ivshmem BAR2!</span></span><br><span class="line">ept_add_mr(vm, (<span class="keyword">uint64_t</span> *)vm-&gt;arch_vm.nworld_eptp, vbar-&gt;base_hpa,</span><br><span class="line">vbar-&gt;base_gpa, vbar-&gt;size, EPT_RD | EPT_WR | EPT_WB | EPT_IGNORE_PAT);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device model code</span></span><br><span class="line">create_ivshmem_from_dm(struct vmctx *ctx, struct pci_vdev *vdev,</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">uint32_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">addr = (<span class="keyword">void</span> *)mmap(<span class="literal">NULL</span>, size, PROT_READ | PROT_WRITE,</span><br><span class="line">MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">bar_addr = pci_get_cfgdata32(vdev, PCIR_BAR(IVSHMEM_MEM_BAR));</span><br><span class="line">bar_addr |= ((<span class="keyword">uint64_t</span>)pci_get_cfgdata32(vdev, PCIR_BAR(IVSHMEM_MEM_BAR + <span class="number">1</span>)) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">bar_addr &amp;= PCIM_BAR_MEM_BASE;</span><br><span class="line">pr_dbg(<span class="string">"shm configuration, vma 0x%lx, ivshmem bar 0x%lx, size 0x%x\n"</span>,</span><br><span class="line">(<span class="keyword">uint64_t</span>)addr, bar_addr, size);</span><br><span class="line"><span class="comment">//vm_map_memseg_vma is called to build EPT mapping for ivshmem BAR2!</span></span><br><span class="line"><span class="keyword">if</span> (!addr || vm_map_memseg_vma(ctx, size, bar_addr,</span><br><span class="line">(<span class="keyword">uint64_t</span>)addr, PROT_RW) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">pr_warn(<span class="string">"failed to map shared memory\n"</span>);</span><br><span class="line"><span class="keyword">goto</span> err;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料:</p><ul><li><a href="https://git.qemu.org/?p=qemu.git;a=blob_plain;f=docs/specs/ivshmem-spec.txt;hb=HEAD" target="_blank" rel="noopener">Device Specification for Inter-VM shared memory device</a></li><li><a href="https://projectacrn.github.io/latest/developer-guides/hld/ivshmem-hld.html" target="_blank" rel="noopener">ACRN Shared Memory Based Inter-VM Communication</a></li><li><a href="https://www.researchgate.net/publication/345933128_Real_Time_Communication_Between_Two_Hypervised_Operating_Systems" target="_blank" rel="noopener">Real Time Communication Between Two Hypervised Operating Systems</a></li><li><a href="http://just4coding.com/2021/09/12/qemu-ivshmem/" target="_blank" rel="noopener">QEMU虚拟机内识别ivshmem设备</a></li><li><a href="https://drive.google.com/drive/folders/1ffFpbw_FlWrEqSmD8x8tQ_NHAgYd3M37" target="_blank" rel="noopener">Inter-VM Communication Introduction (DM land)</a></li><li><a href="https://drive.google.com/drive/folders/1rgfTZqETjCq2wCuiCwAGadgKIPom9lAr" target="_blank" rel="noopener">Inter-VM Communication Introduction (Hv-Land)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mark下ivshmem相关笔记。
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/tags/PCI-PCIe/"/>
    
  </entry>
  
  <entry>
    <title>Notes about PASID (Process Address Space ID)</title>
    <link href="http://liujunming.github.io/2021/11/09/Notes%20about-PASID-Process-Address-Space-ID/"/>
    <id>http://liujunming.github.io/2021/11/09/Notes about-PASID-Process-Address-Space-ID/</id>
    <published>2021-11-09T14:22:25.000Z</published>
    <updated>2021-11-11T13:10:18.964Z</updated>
    
    <content type="html"><![CDATA[<p>PASID (Process Address Space ID) is an optional feature that enables sharing of a single Endpoint device across multiple processes(multiple address spaces per device) while providing each process a complete 64-bit virtual address space.  <a id="more"></a> PASID is used to identify process address space.</p><p>A PASID is a PCIe-defined Transaction Layer Packet (TLP) prefix. A PASID is a 20-bit number allocated and managed by the OS. PASID is included in all transactions between the platform and the device.</p><p>The IOMMU driver allocates a PASID and the device uses it in DMA transactions.</p><p>总结:（考虑非虚拟化的情况）在Intel平台下，由设备发起的I/O虚拟地址(IOVA，可以认为是host virtual address)需要IOMMU转化为host physical address。</p><p>IOMMU PASID Table: Per-device table by hardware design!</p><p><img src="/images/2021/11/4.png" alt></p><p>上图中，红框标注的即为IOMMU PASID table。</p><p><img src="/images/2021/11/1.png" alt></p><p><img src="/images/2021/11/2.png" alt></p><p><img src="/images/2021/11/3.png" alt></p><hr><p>参考资料:</p><ol><li><a href="https://www.plda.com/pcie-glossary/pasid" target="_blank" rel="noopener">pcie-glossary/pasid</a></li><li><a href="https://www.kernel.org/doc/html/latest/x86/sva.html" target="_blank" rel="noopener">Shared Virtual Addressing (SVA) with ENQCMD</a></li><li><a href="https://www.youtube.com/watch?v=xTwA3kC7ShA" target="_blank" rel="noopener">PASID Management in KVM - Yi Liu &amp; Jacob Pan</a></li><li><a href="https://events19.linuxfoundation.cn/wp-content/uploads/2017/11/Intel%C2%AE-Scalable-I_O-Virtualization_Kevin-Tian.pdf" target="_blank" rel="noopener">Intel®-Scalable-I_O-Virtualization</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PASID (Process Address Space ID) is an optional feature that enables sharing of a single Endpoint device across multiple processes(multiple address spaces per device) while providing each process a complete 64-bit virtual address space.
    
    </summary>
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/categories/PCI-PCIe/"/>
    
    
      <category term="PCI&amp;PCIe" scheme="http://liujunming.github.io/tags/PCI-PCIe/"/>
    
  </entry>
  
  <entry>
    <title>Dive into irqfd(KVM side) mechanism</title>
    <link href="http://liujunming.github.io/2021/10/27/Dive-into-irqfd-KVM-side-mechanism/"/>
    <id>http://liujunming.github.io/2021/10/27/Dive-into-irqfd-KVM-side-mechanism/</id>
    <published>2021-10-27T01:53:42.000Z</published>
    <updated>2021-10-28T10:05:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>本文将深入理解irqfd机制，偏向于KVM side。为了便于理清irqfd机制，本文只介绍patch <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=721eecbf4fe995ca94a9edec0c9843b1cc0eaaf3" target="_blank" rel="noopener">KVM: irqfd</a>中的内容。<a id="more"></a></p><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>irqfd in KVM is implemented based on eventfd in Linux.</p><p>As its name shows, irqfd is basically a fd that is bound to an interrupt in the virtual machine. Here the fd must be an eventfd. The delivery path is single direction, say, interrupt is delivered from outside world into the guest. </p><p>With irqfd, if we want to trigger an interrupt we have setup, what we need to do is only write to that corresponding eventfd. To write it in userspace, a simple <code>write()</code> syscall would suffice (actually there is a libc call named <code>eventfd_write()</code>, however that’s merely a wrapper of the <code>write()</code> system call). To do it in kernel, we can use <code>eventfd_signal()</code> instead.</p><h3 id="2-Overview"><a href="#2-Overview" class="headerlink" title="2. Overview"></a>2. Overview</h3><p><img src="/images/2021/10/16.png" alt></p><p>irqfd基于eventfd机制，qemu中将一个gsi(全局系统中断号)与eventfd捆绑后，向kvm发送注册irqfd请求，kvm收到请求后将带有gsi信息的eventfd加入到与irqfd有关的等待队列中，一旦有进程向该eventfd写入，等待队列中的元素就会唤醒，并调用相应的唤醒函数(<code>irqfd_wakeup</code>)向guest注入中断(<code>irqfd_inject</code>)。</p><h3 id="3-Details"><a href="#3-Details" class="headerlink" title="3. Details"></a>3. Details</h3><p><img src="/images/2021/10/17.png" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kvm_irqfd_assign</span><span class="params">(struct kvm *kvm, struct kvm_irqfd *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kvm_kernel_irqfd</span> *<span class="title">irqfd</span>;</span></span><br><span class="line">...</span><br><span class="line">irqfd = kzalloc(<span class="keyword">sizeof</span>(*irqfd), GFP_KERNEL_ACCOUNT);</span><br><span class="line">irqfd-&gt;kvm = kvm;</span><br><span class="line">irqfd-&gt;gsi = args-&gt;gsi;</span><br><span class="line">INIT_LIST_HEAD(&amp;irqfd-&gt;<span class="built_in">list</span>);</span><br><span class="line">INIT_WORK(&amp;irqfd-&gt;inject, irqfd_inject);</span><br><span class="line">INIT_WORK(&amp;irqfd-&gt;shutdown, irqfd_shutdown);</span><br><span class="line">...</span><br><span class="line">irqfd-&gt;eventfd = eventfd;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Install our own custom wake-up handling so we are notified via</span></span><br><span class="line"><span class="comment"> * a callback whenever someone signals the underlying eventfd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">init_waitqueue_func_entry(&amp;irqfd-&gt;wait, irqfd_wakeup);</span><br><span class="line">...</span><br><span class="line">init_poll_funcptr(&amp;irqfd-&gt;pt, irqfd_ptable_queue_proc);</span><br><span class="line">events = vfs_poll(f.file, &amp;irqfd-&gt;pt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kvm_kernel_irqfd结构中有2个work_struct，inject和shutdown，分别负责触发中断和关闭中断，这两个work_struct各自对应的操作函数分别为irqfd_inject和irqfd_shutdown。</p><p>kvm_irqfd_assign调用init_waitqueue_func_entry将<strong>irqfd_wakeup</strong>函数注册为irqfd中<strong>wait queue entry</strong>激活时的处理函数。<strong>这样任何写入该irqfd对应的eventfd的行为都将触发这个函数。</strong></p><p>kvm_irqfd_assign利用init_poll_funcptr将irqfd_ptable_queue_proc函数注册为irqfd中的poll table的处理函数。<strong>irqfd_ptable_queue_proc会将poll table中对应的wait queue entry加入到waitqueue中去。</strong></p><p>kvm_irq_assign以irqfd-&gt;pt为参数，调用eventfd的poll函数，也就是eventfd_poll；eventfd_poll会调用poll_wait函数；poll_wait会回调之前为poll table注册的irqfd_ptable_queue_proc函数。</p><hr><p>参考资料:</p><ol><li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=721eecbf4fe995ca94a9edec0c9843b1cc0eaaf3" target="_blank" rel="noopener">KVM: irqfd</a></li><li><a href="https://blog.csdn.net/LoyenWang/article/details/115805007?spm=1001.2014.3001.5501" target="_blank" rel="noopener">Linux虚拟化KVM-Qemu分析（十二）之ioeventfd与irqfd</a></li><li><a href="https://www.cnblogs.com/haiyonghao/p/14440723.html" target="_blank" rel="noopener">qemu-kvm的irqfd机制</a></li><li><a href="http://xzpeter.org/htmls/2017_12_07_kvm_irqfd/kvm_irqfd_implementation.html" target="_blank" rel="noopener">KVM Irqfd Introduction</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将深入理解irqfd机制，偏向于KVM side。为了便于理清irqfd机制，本文只介绍patch &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=721eecbf4fe995ca94a9edec0c9843b1cc0eaaf3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KVM: irqfd&lt;/a&gt;中的内容。
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="KVM" scheme="http://liujunming.github.io/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>Dive into ioeventfd(KVM side) mechanism</title>
    <link href="http://liujunming.github.io/2021/10/26/Dive-into-ioeventfd(kvm%20side)-mechanism/"/>
    <id>http://liujunming.github.io/2021/10/26/Dive-into-ioeventfd(kvm side)-mechanism/</id>
    <published>2021-10-26T07:07:25.000Z</published>
    <updated>2021-10-26T15:12:22.036Z</updated>
    
    <content type="html"><![CDATA[<p>本文将深入理解ioeventfd机制，偏向于KVM side。<a id="more"></a></p><h3 id="1-Prerequisite"><a href="#1-Prerequisite" class="headerlink" title="1. Prerequisite"></a>1. Prerequisite</h3><p><a href="/2021/10/25/eventfd-system-call内核实现/">eventfd system call内核实现</a></p><h3 id="2-Introduction-and-Motivation"><a href="#2-Introduction-and-Motivation" class="headerlink" title="2. Introduction and Motivation"></a>2. Introduction and Motivation</h3><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d34e6b175e61821026893ec5298cc8e7558df43a" target="_blank" rel="noopener">KVM: add ioeventfd support</a>中的commit message很好地阐述了ioeventfd的motivation。</p><p>ioeventfd is a mechanism to <strong>register PIO/MMIO regions to trigger an eventfd signal when written to by a guest</strong>.  Host userspace can register any arbitrary IO address with a corresponding eventfd and then pass the eventfd to a specific end-point of interest for handling.</p><p>Normal IO requires a blocking round-trip since the operation may cause side-effects in the emulated model or may return data to the caller. Therefore, an IO in KVM traps from the guest to the host, causes a VMX/SVM “heavy-weight” exit back to userspace, and is ultimately serviced by qemu’s device model <strong>synchronously</strong> before returning control back to the vcpu.</p><p>However, there is a subclass of IO which acts purely as a trigger for other IO (such as to kick off an out-of-band DMA request, etc).  For these patterns, the synchronous call is particularly expensive since we really only want to simply get our notification transmitted <strong>asychronously</strong> and return as quickly as possible.  All the sychronous infrastructure to ensure proper data-dependencies are met in the normal IO case are just unecessary overhead for signalling.  This adds additional computational load on the system, as well as latency to the signalling path.</p><p>Therefore, we provide a mechanism for registration of an in-kernel trigger point that allows the VCPU to only require a very brief, lightweight exit just long enough to signal an eventfd.  This also means that any clients compatible with the eventfd interface (which includes userspace and kernelspace equally well) can now register to be notified. The end result should be a more flexible and higher performance notification API for the backend KVM hypervisor and perhipheral components.</p><p>读者如果对<em>kick off an out-of-band DMA request</em>这句话不够理解，可以阅读:<a href="/2021/09/12/深入理解DMA-part1/">深入理解DMA part1</a>和<a href="/2021/09/13/深入理解DMA-part2/">深入理解DMA part2</a></p><h3 id="3-Overview"><a href="#3-Overview" class="headerlink" title="3. Overview"></a>3. Overview</h3><p><img src="/images/2021/10/15.jpeg" alt></p><p>Sequences:</p><ol><li>QEMU将一段PIO/MMIO region与eventfd绑定(具体来说，就是填好<code>struct kvm_ioeventfd</code>)，并设置好notification的handler;</li><li>通过ioctl将<code>struct kvm_ioeventfd</code>结构体传给KVM;</li><li>KVM根据信息，注册PIO/MMIO region的handler为<code>ioeventfd_ops</code>;</li><li>Guest写PIO/MMIO region时，会发生VM Exit，KVM最终会调用<code>ioeventfd_write</code> to trigger an event to QEMU;</li><li>QEMU监测到ioeventfd上出现了event，调用相应的handler处理IO.</li></ol><h3 id="4-Details"><a href="#4-Details" class="headerlink" title="4. Details"></a>4. Details</h3><p>用户态传入的参数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kvm_ioeventfd</span> &#123;</span></span><br><span class="line">    __u64 datamatch;<span class="comment">/* 1 */</span></span><br><span class="line">    __u64 addr;        <span class="comment">/* legal pio/mmio address */</span></span><br><span class="line">    __u32 len;         <span class="comment">/* 0, 1, 2, 4, or 8 bytes    */</span></span><br><span class="line">    __s32 fd;<span class="comment">/* 2 */</span></span><br><span class="line">    __u32 flags;</span><br><span class="line">    __u8  pad[<span class="number">36</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果<code>flags</code>设置了<code>KVM_IOEVENTFD_FLAG_DATAMATCH</code>，只有当guest向addr地址写入的值与<code>datamatch</code>值相等时，才会触发event。</p><p>用户态信息<code>kvm_ioeventfd</code>需要转化成内核态存放。ioeventfd内核态结构体基于eventfd，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * ioeventfd: translate a PIO/MMIO memory write to an eventfd signal.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * userspace can register a PIO/MMIO address with an eventfd for receiving</span></span><br><span class="line"><span class="comment"> * notification when the memory has been touched.</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">ioeventfd</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>     <span class="title">list</span>;</span></span><br><span class="line">u64                  addr;</span><br><span class="line"><span class="keyword">int</span>                  length;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span>  *<span class="title">eventfd</span>;</span></span><br><span class="line">u64                  datamatch;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kvm_io_device</span> <span class="title">dev</span>;</span></span><br><span class="line">u8                   bus_idx;</span><br><span class="line"><span class="keyword">bool</span>                 wildcard;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>list用于将当前ioeventfd链接到kvm的ioeventfd链表中去.</p></li><li><p>addr是ioeventfd对应的IO地址.</p></li><li><p>length是eventfd关联的长度.</p></li><li><p>eventfd是该ioeventfd对应的eventfd.</p></li><li><p>datamatch上文已经介绍过了.</p></li><li><p>dev用于将该ioeventfd与guest关联起来(通过注册该dev到guest).</p></li><li><p>bus_idx是该ioeventfd要注册到kvm的哪个总线上.</p><ul><li>kvm中将ioeventfd注册的地址分为4类，可以认为每类地址有独立的地址空间，它们被抽象成4个bus上的地址。分别是kvm_bus所列出的MMIO，PIO，VIRTIO_CCW_NOTIFY，FAST_MMIO。MMIO和FAST_MMIO的区别是，MMIO需要检查写入地址的值长度是否和ioeventfd指定的长度相等，FAST_MMIO则不需要检查长度。</li></ul></li><li>wildcard与datamatch互斥，如果kvm_ioeventfd中datamatch为false，则_ioeventfd-&gt;wildcard设为true.</li></ul><p>所以<code>_ioeventfd</code>描述了一个ioeventfd要注册到kvm中的所有信息，其中包含了ioeventfd信息和需要注册到guest的总线和设备信息。</p><hr><p>KVM中的函数调用链如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kvm_ioeventfd</span><br><span class="line">kvm_assign_ioeventfd</span><br><span class="line">kvm_assign_ioeventfd_idx</span><br><span class="line">kvm_iodevice_init(&amp;p-&gt;dev, &amp;ioeventfd_ops)</span><br><span class="line">kvm_io_bus_register_dev</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kvm_io_bus_write</span><br><span class="line">__kvm_io_bus_write</span><br><span class="line">kvm_iodevice_write</span><br><span class="line">dev-&gt;ops-&gt;write(ioeventfd_write)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kvm_io_device_ops</span> <span class="title">ioeventfd_ops</span> = &#123;</span></span><br><span class="line">.write      = ioeventfd_write,</span><br><span class="line">.destructor = ioeventfd_destructor,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，ioeventfd对应的文件操作只有write操作，而没有read操作。</p><p>write操作对应guest中写入ioeventfd对应的IO地址时触发的操作，也就是guest执行OUT类汇编指令时触发的操作，相反read操作就是guest执行IN类汇编指令时触发的操作，OUT类指令只是简单向外部输出数据，无需等待QEMU处理完成即可继续运行guest，但IN指令需要从外部获取数据，必须要等待QEMU处理完成IO请求再继续运行guest。</p><p>ioeventfd设计的初衷就是节省guest运行OUT类指令时的时间，IN类指令执行时间无法节省，因此这里的ioeventfd 文件操作中只有write而没有read。</p></blockquote><p>剩下的事情就留给读者了，结合着源码与参考资料，去发现更多的细节吧!</p><hr><p>参考资料:</p><ol><li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d34e6b175e61821026893ec5298cc8e7558df43a" target="_blank" rel="noopener">KVM: add ioeventfd support</a></li><li><a href="https://www.cnblogs.com/haiyonghao/p/14440743.html" target="_blank" rel="noopener">qemu-kvm的ioeventfd机制</a></li><li><a href="https://blog.csdn.net/huang987246510/article/details/105618557" target="_blank" rel="noopener">qemu中的eventfd——ioeventfd</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将深入理解ioeventfd机制，偏向于KVM side。
    
    </summary>
    
      <category term="虚拟化" scheme="http://liujunming.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="http://liujunming.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="KVM" scheme="http://liujunming.github.io/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>eventfd system call内核实现</title>
    <link href="http://liujunming.github.io/2021/10/25/eventfd-system-call%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0/"/>
    <id>http://liujunming.github.io/2021/10/25/eventfd-system-call内核实现/</id>
    <published>2021-10-25T00:55:15.000Z</published>
    <updated>2021-10-25T10:06:37.351Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍<code>eventfd</code>这个system call的内核实现。<a id="more"></a></p><h3 id="1-Prerequisite"><a href="#1-Prerequisite" class="headerlink" title="1. Prerequisite"></a>1. Prerequisite</h3><ul><li><code>man eventfd</code></li><li><a href="/2019/08/24/linux-kernel中eventfd的使用/">linux kernel中eventfd的使用</a></li></ul><p>summary(仅考虑eventfd的flags为0 ，同时eventfd counter 没有 exceed the maximum):</p><ol><li>the eventfd counter has a nonzero value, then a <code>read</code> returns 8 bytes containing that value, and the counter’s value is reset to zero;</li><li>If the eventfd counter is zero at the time of the call to <code>read</code>, then the call blocks until the counter becomes nonzero;</li><li>A  <code>write</code>  call  adds  the 8-byte integer value supplied in its buffer to the counter;</li><li><code>eventfd_signal(struct eventfd_ctx *ctx, __u64 n)</code>: Adds @n to the eventfd counter.</li></ol><h3 id="2-Data-struct"><a href="#2-Data-struct" class="headerlink" title="2. Data struct"></a>2. Data struct</h3><p><code>eventfd_ctx</code>结构的形式如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line"><span class="keyword">wait_queue_head_t</span> wqh;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Every time that a write(2) is performed on an eventfd, the</span></span><br><span class="line"><span class="comment"> * value of the __u64 being written is added to "count" and a</span></span><br><span class="line"><span class="comment"> * wakeup is performed on "wqh". A read(2) will return the "count"</span></span><br><span class="line"><span class="comment"> * value to userspace, and will reset "count" to zero. The kernel</span></span><br><span class="line"><span class="comment"> * side eventfd_signal() also, adds to the "count" counter and</span></span><br><span class="line"><span class="comment"> * issue a wakeup.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__u64 count;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flags;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在一个eventfd上执行<code>write</code>系统调用，会向<code>count</code>加上被写入的值，并唤醒等待队列<code>wqh</code>中的元素。内核中的<code>eventfd_signal</code>函数也会增加<code>count</code>的值并唤醒<code>wqh</code>中的元素。</p><p>在eventfd上执行<code>read</code>系统调用，会向用户空间返回<code>count</code>的值，并且该eventfd对应的<code>eventfd_ctx</code>结构中的<code>count</code>会被清0。</p><p><code>kref</code>是一个内核中的通用变量，一般插入到结构体中，用于记录该结构体被内核各处引用的次数，当<code>kref-&gt;refcount</code>为0时，该结构体不再被引用，需要进行释放。</p><p><code>flags</code>由调用者传入，可能取值为<code>EFD_CLOEXEC</code>、<code>EFD_NONBLOCK</code>、<code>EFD_SEMAPHORE</code>三者的任意或组合。</p><p><code>id</code>即eventfd的id，用于唯一标识一个eventfd。</p><h3 id="3-Core-function"><a href="#3-Core-function" class="headerlink" title="3. Core function"></a>3. Core function</h3><h4 id="3-1-系统调用的定义"><a href="#3-1-系统调用的定义" class="headerlink" title="3.1 系统调用的定义"></a>3.1 系统调用的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE1(eventfd, <span class="keyword">unsigned</span> <span class="keyword">int</span>, count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> do_eventfd(count, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_eventfd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> count, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span>;</span></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line">...</span><br><span class="line">ctx = kmalloc(<span class="keyword">sizeof</span>(*ctx), GFP_KERNEL);</span><br><span class="line">...</span><br><span class="line">kref_init(&amp;ctx-&gt;kref);</span><br><span class="line">init_waitqueue_head(&amp;ctx-&gt;wqh);</span><br><span class="line">ctx-&gt;count = count;</span><br><span class="line">ctx-&gt;flags = flags;</span><br><span class="line">ctx-&gt;id = ida_simple_get(&amp;eventfd_ida, <span class="number">0</span>, <span class="number">0</span>, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">fd = anon_inode_getfd(<span class="string">"[eventfd]"</span>, &amp;eventfd_fops, ctx,</span><br><span class="line">      O_RDWR | (flags &amp; EFD_SHARED_FCNTL_FLAGS));</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>分配一个eventfd_ctx结构用于存储eventfd相关信息</li><li>设置eventfd_ctx-&gt;kref中的值为1，表明内核正在引用该eventfd</li><li>初始化eventfd_ctx结构中的等待队列</li><li>为eventfd_ctx结构中的count(读写eventfd时要操作的量)赋上系统调用传入的count</li><li>通过Linux提供的<strong>ida机制</strong>为eventfd_ctx结构中的id申请一个id</li><li>通过anon_inode_getfd创建一个文件实例，该文件的操作方法为eventfd_fops，fd-&gt;private_data为eventfd_ctx，文件实例名为eventfd。</li><li>返回该文件实例的文件描述符</li></ol><h4 id="3-2-eventfd-read"><a href="#3-2-eventfd-read" class="headerlink" title="3.2 eventfd_read"></a>3.2 eventfd_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">eventfd_read</span><span class="params">(struct file *file, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">ssize_t</span> res;</span><br><span class="line">__u64 ucnt = <span class="number">0</span>;</span><br><span class="line">DECLARE_WAITQUEUE(wait, current);</span><br><span class="line"></span><br><span class="line">res = -EAGAIN;</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;count &gt; <span class="number">0</span>)</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!(file-&gt;f_flags &amp; O_NONBLOCK)) &#123;</span><br><span class="line"><span class="comment">/*add to wait queue*/</span></span><br><span class="line">__add_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="keyword">if</span> (ctx-&gt;count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*触发调度器，执行调度*/</span></span><br><span class="line">schedule();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*remove from the wait queue*/</span></span><br><span class="line">__remove_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (likely(res &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">eventfd_ctx_do_read(ctx, &amp;ucnt);</span><br><span class="line"><span class="comment">/*judge whether wait queue is empty*/</span></span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh)) <span class="comment">//在该eventfd上write阻塞的进程</span></span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, EPOLLOUT); <span class="comment">//唤醒对应的进程</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eventfd_ctx_do_read</span><span class="params">(struct eventfd_ctx *ctx, __u64 *cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*cnt = (ctx-&gt;flags &amp; EFD_SEMAPHORE) ? <span class="number">1</span> : ctx-&gt;count;</span><br><span class="line">ctx-&gt;count -= *cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>只有eventfd_ctx-&gt;count大于0时，eventfd才是可读的，此时调用eventfd_ctx_do_read对eventfd_ctx的count进行处理，如果eventfd_ctx-&gt;flags中的EFD_SEMAPHORE为0，就将count变量置0，并激活在等待队列中EPOLLOUT(write阻塞)的进程。</p></li><li><p>如果eventfd_ctx-&gt;count等于0，即该eventfd当前不可读，如果eventfd_ctx-&gt;flags中的O_NONBLOCK没有置位，那么将发起读eventfd动作的进程放入eventfd_ctx中的等待队列，并重新调度新的进程运行。</p></li></ul><h4 id="3-3-eventfd-write"><a href="#3-3-eventfd-write" class="headerlink" title="3.3 eventfd_write"></a>3.3 eventfd_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">eventfd_write</span><span class="params">(struct file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventfd_ctx</span> *<span class="title">ctx</span> = <span class="title">file</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"><span class="keyword">ssize_t</span> res;</span><br><span class="line">__u64 ucnt;</span><br><span class="line">DECLARE_WAITQUEUE(wait, current);</span><br><span class="line"></span><br><span class="line">copy_from_user(&amp;ucnt, buf, <span class="keyword">sizeof</span>(ucnt));</span><br><span class="line">...</span><br><span class="line">res = -EAGAIN;</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &gt; ucnt)</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!(file-&gt;f_flags &amp; O_NONBLOCK)) &#123;</span><br><span class="line">__add_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line"><span class="keyword">for</span> (res = <span class="number">0</span>;;) &#123;</span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &gt; ucnt) &#123;</span><br><span class="line">res = <span class="keyword">sizeof</span>(ucnt);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">schedule();</span><br><span class="line">&#125;</span><br><span class="line">__remove_wait_queue(&amp;ctx-&gt;wqh, &amp;wait);</span><br><span class="line">__set_current_state(TASK_RUNNING);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (likely(res &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">ctx-&gt;count += ucnt;</span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh)) <span class="comment">//在该eventfd上read阻塞的进程</span></span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, EPOLLIN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将想要写入eventfd的value赋值到ucnt，判断ULLONG_MAX - eventfd_ctx-&gt;count 与ucnt的大小，确认eventfd中是否还有足够空间用于写入。</p><ul><li><p>如果有足够空间用于写入，ctx-&gt;count += ucnt，并激活在等待队列中EPOLLIN(read阻塞)的进程。</p></li><li><p>如果没有足够空间用于写入，则将发起写eventfd动作的进程放入eventfd_ctx中的等待队列，并重新调度新的进程运行。</p></li></ul><h4 id="3-4-eventfd-signal"><a href="#3-4-eventfd-signal" class="headerlink" title="3.4 eventfd_signal"></a>3.4 eventfd_signal</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eventfd_signal - Adds @n to the eventfd counter.</span></span><br><span class="line"><span class="comment"> * @ctx: [in] Pointer to the eventfd context.</span></span><br><span class="line"><span class="comment"> * @n: [in] Value of the counter to be added to the eventfd internal counter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__<span class="function">u64 <span class="title">eventfd_signal</span><span class="params">(struct eventfd_ctx *ctx, __u64 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (ULLONG_MAX - ctx-&gt;count &lt; n)</span><br><span class="line">n = ULLONG_MAX - ctx-&gt;count;</span><br><span class="line">ctx-&gt;count += n;</span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ctx-&gt;wqh)) <span class="comment">//在该eventfd上read阻塞的进程</span></span><br><span class="line">wake_up_locked_poll(&amp;ctx-&gt;wqh, EPOLLIN);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考资料:</p><ol><li><a href="https://www.cnblogs.com/haiyonghao/p/14440737.html" target="_blank" rel="noopener">Linux的eventfd机制</a></li><li><a href="https://huazq.github.io/2019/08/08/eventfd%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">eventfd分析</a></li><li><a href="https://www.cnblogs.com/ck1020/p/7214310.html" target="_blank" rel="noopener">Linux eventfd分析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍&lt;code&gt;eventfd&lt;/code&gt;这个system call的内核实现。
    
    </summary>
    
      <category term="Kernel" scheme="http://liujunming.github.io/categories/Kernel/"/>
    
    
      <category term="Kernel" scheme="http://liujunming.github.io/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>x86-64 Instruction Encoding</title>
    <link href="http://liujunming.github.io/2021/10/22/x86-64-Instruction-Encoding/"/>
    <id>http://liujunming.github.io/2021/10/22/x86-64-Instruction-Encoding/</id>
    <published>2021-10-22T03:20:48.000Z</published>
    <updated>2021-10-22T07:16:48.160Z</updated>
    
    <content type="html"><![CDATA[<p>本文将借鉴<a href="https://www.systutorials.com/beginners-guide-x86-64-instruction-encoding/" target="_blank" rel="noopener">A Beginners’ Guide to x86-64 Instruction Encoding</a>，并补充相关材料，以一个具体的例子来介绍Intel Instruction Encoding。<br><a id="more"></a></p><h3 id="1-Background"><a href="#1-Background" class="headerlink" title="1. Background"></a>1. Background</h3><p>以一个典型的memory reference来引入Instruction Encoding。<br><code>[base + index*scale + disp]</code></p><p><code>base</code>和<code>index</code>是寄存器，<code>disp</code>是偏移量，<code>scale</code>是系数。<br><img src="/images/2021/10/09.png" alt></p><p><center>Figure1</center><br>Figure1中，SIB中的Scale，Index，Base与<code>scale</code>,<code>index</code>,<code>base</code>相对应。 Displacement与<code>disp</code>相对应。</p><h3 id="2-Tools-and-tips-for-finding-out-an-x86-64-instruction’s-encoding"><a href="#2-Tools-and-tips-for-finding-out-an-x86-64-instruction’s-encoding" class="headerlink" title="2. Tools and tips for finding out an x86-64 instruction’s encoding"></a>2. Tools and tips for finding out an x86-64 instruction’s encoding</h3><p>To quickly find out the encoding of an instruction, you can use the GNU assembler  <code>as</code> and the <code>objdump</code> tool together. For example, to find out the encoding of the instruction <code>addq 10(%rdi), %r8</code>, you can do it as follows.</p><p>First, create a file add.s containing one line<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addq 10(%rdi), %r8</span><br></pre></td></tr></table></figure></p><p>Second, assemble the add.s to object file by<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as add.s -o add.o</span><br></pre></td></tr></table></figure></p><p>Last, deassemble the object file by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d add.o</span><br></pre></td></tr></table></figure><p>It will print out</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;.text&gt;:</span><br><span class="line">   0:   4c 03 47 0a             add    0xa(%rdi),%r8</span><br></pre></td></tr></table></figure><p>Here <code>4c 03 47 0a</code> is the 4-byte encoding of the <code>addq</code> instruction.</p><h3 id="3-Brief-introduction-to-x86-64-instruction-encoding"><a href="#3-Brief-introduction-to-x86-64-instruction-encoding" class="headerlink" title="3. Brief introduction to x86-64 instruction encoding"></a>3. Brief introduction to x86-64 instruction encoding</h3><p>The x86-64 instructions are encoded one by one as a variable number of bytes for each. Each instruction’s encoding consists of:</p><ul><li>an opcode</li><li>a register and/or address mode specifier consisting of the ModR/M byte and sometimes the scale-index-base (SIB) byte (if required)</li><li>a displacement and an immediate data field (if required)</li></ul><p>Please refer to Figure1 for more information.</p><h3 id="4-An-example-manually-encode-an-x86-64-instruction"><a href="#4-An-example-manually-encode-an-x86-64-instruction" class="headerlink" title="4. An example: manually encode an x86-64 instruction"></a>4. An example: manually encode an x86-64 instruction</h3><p>Let’s take a look at the encoding of an instruction <code>add r8,QWORD PTR [rdi+0xa]</code> (in Intel syntax) in the previous part. Let’s see how it is encoded to <code>4c 03 47 0a</code>.</p><p>From the “add” instruction reference from “ADD”, “INSTRUCTION SET REFERENCE” in the ISA reference Volume 2A., find the line for the encoding of the <code>ADD r64, r/m64</code> corresponding to this instruction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Opcode      Instruction     Op/  64-bit Compat/   Description</span><br><span class="line">                            En   Mode   Leg Mode</span><br><span class="line">REX.W+03/r  ADD r64,r/m64   RM   Valid  N.E.      Add r/m64 to r64.</span><br></pre></td></tr></table></figure><p>REX info:</p><p><img src="/images/2021/10/13.png" alt></p><p>and, from the REX description</p><blockquote><p>In 64-bit mode, the instruction’s default operation size is 32 bits. … Using a REX prefix in the form of REX.W promotes operation to 64 bits.</p></blockquote><p>So, we get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REX.W = 1</span><br></pre></td></tr></table></figure><p>The ‘R’, ‘X’ and ‘B’ bits are related to the operand encoding (check “Table 2-4. REX Prefix Fields [BITS: 0100WRXB]” of the reference volume 2A).</p><blockquote><p>REX.X bit modifies the SIB index field.</p></blockquote><p>SIB is not used in this instruction. Hence,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REX.X = 0</span><br></pre></td></tr></table></figure><p>Let’s further look at the encoding of the operands. From the “Instruction Operand Encoding” for the <code>add</code> instruction:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Op/En Operand 1      Operand 2    Operand 3 Operand 4</span><br><span class="line">RM    ModRM:reg(r,w) ModRM:r/m(r) NA        NA</span><br></pre></td></tr></table></figure><p>There will be 2 operand parts for the <code>RM</code> encoding. The first part will be <code>ModRM:reg(r,w)</code> and the second part will be <code>ModRM:r/m(r)</code>. “Figure 2-4. Memory Addressing Without an SIB Byte; REX.X Not Used” from Volume 2 shows the encoding for this case.</p><p><img src="/images/2021/10/12.jpg" alt></p><p><img src="/images/2021/10/14.png" alt></p><p>The REX.R and REX.B bits and the ModeRM byte will be decided accordingly. There are 3 parts in the ModRM byte: ‘mod’, ‘reg’ and ‘r/m’.</p><p>There is a table “Table 2-2. 32-Bit Addressing Forms with the ModR/M Byte” (it is for 32-bit operands. But from 2.2.1.1, “In 64-bit mode, these formats do not change. Bits needed to<br>define fields in the 64-bit context are provided by the addition of REX prefixes” and hence the same value can be used) in Volume 2 which shows mapping of the operands combinations to the bits values of ‘mod’.</p><p>Although the table applies to 64-bit modes too, it does not show the additional registers like <code>r8</code>. Hence, we only use it to find out bits for ‘Mod’ only for the <code>addq</code> instruction we are encoding it. As <code>0xa</code> can be encoded in a byte, we can use <code>disp8</code> to keep the instruction encoding short. From the row of <code>[EDI]+disp8</code> (actually, all <code>disp8</code> ones share the same ‘Mod’ bits),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mod = 01 (in bits)</span><br></pre></td></tr></table></figure><p>For the encoding of the registers, I compiled a table for the general purpose 64-bit registers for your reference:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_.Reg  Register</span><br><span class="line">----------------</span><br><span class="line">0.000   RAX</span><br><span class="line">0.001   RCX</span><br><span class="line">0.010   RDX</span><br><span class="line">0.011   RBX</span><br><span class="line">0.100   RSP</span><br><span class="line">0.101   RBP</span><br><span class="line">0.110   RSI</span><br><span class="line">0.111   RDI</span><br><span class="line">1.000   R8</span><br><span class="line">1.001   R9</span><br><span class="line">1.010   R10</span><br><span class="line">1.011   R11</span><br><span class="line">1.100   R12</span><br><span class="line">1.101   R13</span><br><span class="line">1.110   R14</span><br><span class="line">1.111   R15</span><br></pre></td></tr></table></figure><p>The ‘_‘ in the ‘_.Reg’ are usually a bit in the REX prefix, such as REX.B and REX.R, depending on specific instructions and operand combinations.</p><p>For the <code>addq</code> instruction in this case, <code>r8</code> is <code>1.000</code> and <code>rdi</code> is <code>0.111</code>. Hence, in bits, we get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg = 000</span><br><span class="line">r/m = 111</span><br><span class="line">REX.B = 0 (from `rdi`)</span><br><span class="line">REX.R = 1 (from `r8`)</span><br></pre></td></tr></table></figure><p>Now, let’s put them together.</p><p>By putting the ‘WRXB’ bits (<code>[BITS: 0100WRXB]</code>) together, we get the REX prefix for this instruction is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0100 1100</span><br></pre></td></tr></table></figure><p>Together with the <code>03</code> in <code>REX.W+03/r</code> from the reference for the <code>ADD</code> instruction, the opcode part, in hexadecimal, is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4c 03</span><br></pre></td></tr></table></figure><p>By putting the <code>mod</code>, <code>reg</code> and <code>r/m</code> together, we get the ModRM byte (in bits)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01 000 111</span><br></pre></td></tr></table></figure><p>which is, in hexadecimal,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure><p>Following the ModRM byte is the displacement is <code>0xa</code>(<code>10</code>‘s hexadecimal representation) in one byte (<code>disp8</code>).</p><p>Putting all these together, we finally get the encoding of <code>add r8,[rdi+0xa]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4c 03 47 0a</span><br></pre></td></tr></table></figure><p>In this example, to show the process, I have shown how to manually do an instruction’s encoding which is usually done by the assembler. You may use the same method to encode all other instruction by checking the reference documents for details of every instruction/operand combinations’ cases.</p><h3 id="5-Tips"><a href="#5-Tips" class="headerlink" title="5. Tips"></a>5. Tips</h3><ul><li><a href="https://wiki.osdev.org/X86-64_Instruction_Encoding" target="_blank" rel="noopener">X86-64 Instruction Encoding</a> </li></ul><p>is a very good page from OSDev as a quick reference.</p><ul><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/bpetkov-x86-hacks.pdf" target="_blank" rel="noopener">x86 Instruction Encoding</a> </li></ul><p>可以快速扫一下内容，例如:</p><p><img src="/images/2021/10/10.png" alt></p><p>有些内容还是比较形象直观的。</p><ul><li>Intel SDM vol2 2.1 INSTRUCTION FORMAT FOR PROTECTED MODE, REAL-ADDRESS MODE,<br>AND VIRTUAL-8086 MODE </li></ul><p><img src="/images/2021/10/11.png" alt></p><p>以上内容是对Figure1的补充说明。</p><ul><li>Intel SDM vol2 3.1 INTERPRETING THE INSTRUCTION REFERENCE PAGES</li></ul><p>Intel SDM vol2中有具体的指令说明，需要先扫一下3.1 INTERPRETING THE INSTRUCTION REFERENCE PAGES中的内容。This section describes the format of information contained in the instruction reference pages in this chapter. It explains notational conventions and abbreviations used in these sections.</p><p>For example:</p><p><img src="/images/2021/10/8.png" alt></p><hr><p>参考资料:</p><ol><li><a href="https://www.systutorials.com/beginners-guide-x86-64-instruction-encoding/" target="_blank" rel="noopener">A Beginners’ Guide to x86-64 Instruction Encoding</a></li><li><a href="https://wiki.osdev.org/X86-64_Instruction_Encoding" target="_blank" rel="noopener">X86-64 Instruction Encoding</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/bpetkov-x86-hacks.pdf" target="_blank" rel="noopener">x86 Instruction Encoding</a></li><li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf" target="_blank" rel="noopener">Intel SDM</a></li><li><a href="https://sourceware.org/binutils/docs/as/i386_002dMemory.html" target="_blank" rel="noopener">Memory References</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将借鉴&lt;a href=&quot;https://www.systutorials.com/beginners-guide-x86-64-instruction-encoding/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Beginners’ Guide to x86-64 Instruction Encoding&lt;/a&gt;，并补充相关材料，以一个具体的例子来介绍Intel Instruction Encoding。&lt;br&gt;
    
    </summary>
    
      <category term="体系结构" scheme="http://liujunming.github.io/categories/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="体系结构" scheme="http://liujunming.github.io/tags/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
